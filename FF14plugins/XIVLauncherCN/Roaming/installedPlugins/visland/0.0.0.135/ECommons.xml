<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECommons</name>
    </assembly>
    <members>
        <member name="T:ECommons.Automation.AutoCutsceneSkipper">
            <summary>
            Provides automatic cutscene skipping trigger. Does not includes cutscene skipping confirmation.
            </summary>
        </member>
        <member name="F:ECommons.Automation.AutoCutsceneSkipper.Condition">
            <summary>
            Condition which will be checked to determine if the cutscene should be skipped. Can be null to skip everything unconditionally.
            </summary>
        </member>
        <member name="M:ECommons.Automation.AutoCutsceneSkipper.Init(System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Initializes cutscene skipper trigger. 
            </summary>
            <param name="cutsceneSkipCondition">Condition which will be checked to determine if the cutscene should be skipped. Can be null to skip everything unconditionally.</param>
            <exception cref="T:System.Exception">If already initialized</exception>
        </member>
        <member name="M:ECommons.Automation.AutoCutsceneSkipper.Disable">
            <summary>
            Disables cutscene skipper trigger. Note that you do not need to call this in Dispose of the plugin, it is disposed automatically.
            </summary>
        </member>
        <member name="M:ECommons.Automation.AutoCutsceneSkipper.Enable">
            <summary>
            Enables previously disabled cutscene trigger. Note that you do not have to call this in constructor of the plugin, it is enabled automatically.
            </summary>
        </member>
        <member name="T:ECommons.Automation.Chat">
            <summary>
            A class containing chat functionality
            </summary>
        </member>
        <member name="M:ECommons.Automation.Chat.SendMessageUnsafe(System.Byte[])">
            <summary>
            <para>
            Send a given message to the chat box. <b>This can send chat to the server.</b>
            </para>
            <para>
            <b>This method is unsafe.</b> This method does no checking on your input and
            may send content to the server that the normal client could not. You must
            verify what you're sending and handle content and length to properly use
            this.
            </para>
            </summary>
            <param name="message">Message to send</param>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.SendMessage(System.String)">
            <summary>
            <para>
            Send a given message to the chat box. <b>This can send chat to the server.</b>
            </para>
            <para>
            This method is slightly less unsafe than <see cref="M:ECommons.Automation.Chat.SendMessageUnsafe(System.Byte[])"/>. It
            will throw exceptions for certain inputs that the client can't normally send,
            but it is still possible to make mistakes. Use with caution.
            </para>
            </summary>
            <param name="message">message to send</param>
            <exception cref="T:System.ArgumentException">If <paramref name="message"/> is empty, longer than 500 bytes in UTF-8, or contains invalid characters.</exception>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.ExecuteCommand(System.String)">
            <summary>
            Executes command as if it was typed in chat box. 
            </summary>
            <param name="message">Full text of the command.</param>
            <exception cref="T:System.InvalidOperationException">If you didn't prefixed it with a slash.</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.ExecuteGeneralAction(System.UInt32)">
            <summary>
            Executes General Action by ID via chat.
            </summary>
            <param name="generalActionId"></param>
        </member>
        <member name="M:ECommons.Automation.Chat.ExecuteAction(System.UInt32)">
            <summary>
            Executes Action by ID via chat.
            </summary>
            <param name="actionId"></param>
        </member>
        <member name="M:ECommons.Automation.Chat.SanitiseText(System.String)">
            <summary>
            <para>
            Sanitises a string by removing any invalid input.
            </para>
            <para>
            The result of this method is safe to use with
            <see cref="M:ECommons.Automation.Chat.SendMessage(System.String)"/>, provided that it is not empty or too
            long.
            </para>
            </summary>
            <param name="text">text to sanitise</param>
            <returns>sanitised text</returns>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="P:ECommons.Automation.LegacyTaskManager.TaskManager.MaxTasks">
            <summary>
            Number of tasks that were registered in current cycle. Increases each time a task is enqueued and resets once there are no more tasks.
            </summary>
        </member>
        <member name="F:ECommons.Automation.LegacyTaskManager.TaskManager.TimeLimitMS">
            <summary>
            After this time limit has passed, a task will be given up.
            </summary>
        </member>
        <member name="F:ECommons.Automation.LegacyTaskManager.TaskManager.AbortOnTimeout">
            <summary>
            Whether to abort execution on timeout and clear all remaining tasks or not.
            </summary>
        </member>
        <member name="P:ECommons.Automation.LegacyTaskManager.TaskManager.AbortAt">
            <summary>
            Tick count (<see cref="P:System.Environment.TickCount64"/>) at which current task will be aborted
            </summary>
        </member>
        <member name="P:ECommons.Automation.LegacyTaskManager.TaskManager.NumQueuedTasks">
            <summary>
            Amount of currently queued tasks, including one that is currently being executed
            </summary>
        </member>
        <member name="F:ECommons.Automation.LegacyTaskManager.TaskManager.TimeoutSilently">
            <summary>
            Whether to redirect timeout errors into Verbose channel
            </summary>
        </member>
        <member name="F:ECommons.Automation.LegacyTaskManager.TaskManager.ShowDebug">
            <summary>
            Whether to output debug information into PluginLog
            </summary>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.#ctor">
            <summary>
            Initializes new instance of <see cref="T:ECommons.Automation.LegacyTaskManager.TaskManager"/>.
            </summary>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.SetStepMode(System.Boolean)">
            <summary>
            Sets step mode, when enabled task manager won't execute tasks automatically and will wait for Step command from you.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Step">
            <summary>
            Manually execute task manager cycle.
            </summary>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Dispose">
            <summary>
            Disposes task manager, stopping all tasks immediately.
            </summary>
        </member>
        <member name="P:ECommons.Automation.LegacyTaskManager.TaskManager.IsBusy">
            <summary>
            Whether TaskManager is currently executing a task.
            </summary>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.Int32,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Action,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Action,System.Int32,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Action,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Enqueue(System.Action,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.DelayNext(System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of main queue.
            </summary>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.DelayNext(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of main queue.
            </summary>
            <param name="uniqueName"></param>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.Int32,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Action,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Action,System.Int32,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Action,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.EnqueueImmediate(System.Action,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.DelayNextImmediate(System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.DelayNextImmediate(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="uniqueName"></param>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.LegacyTaskManager.TaskManager.Insert(System.Func{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Adds a task into the start of the main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="T:ECommons.Automation.NeoTaskManager.TaskManager">
            <summary>
            NeoTaskManager provides various benefits over previous task manager: increased speed, no need for immediate tasks, easier task creation and scheduling. Work in progress! Breaking changes may occur.
            </summary>
        </member>
        <member name="F:ECommons.Automation.NeoTaskManager.TaskManager.DefaultConfiguration">
            <summary>
            Default configuration that will be used for tasks. Default configuration must not contain any null statements.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.MaxTasks">
            <summary>
            Amount of tasks that a TaskManager ever observed. Resets to 0 when there are no more tasks.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.IsBusy">
            <summary>
            Indicates whether TaskManager is currently executing tasks
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.Tasks">
            <summary>
            List of currently enqueued tasks. You can modify list directly if you wish, but only ever do that from Framework.Update event.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.CurrentTask">
            <summary>
            A task that is currently being executed.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.RemainingTimeMS">
            <summary>
            Amount of milliseconds remaining before the currently executing task will be aborted
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.StepMode">
            <summary>
            Configures whether debug Step Mode is to be used. While in Step Mode, tasks are not advanced automatically and you must use Step method to advance tasks. Additionally, tasks will ignore time limit in Step Mode.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Dispose">
            <summary>
            Any task managers will be disposed automatically on <see cref="M:ECommons.ECommonsMain.Dispose"/> call, but you may dispose it earlier if you need to.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Abort">
            <summary>
            Immediately clears current task queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.EnqueueDelay(System.Int32,System.Boolean)">
            <summary>
            Direct replacement of DelayNext
            </summary>
            <param name="ms">Amount of delay</param>
            <param name="isFrame">If true, delay is measured in seconds and not </param>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.InsertDelay(System.Int32,System.Boolean)">
            <summary>
            Direct replacement of DelayNextImmediate
            </summary>
            <param name="ms">Amount of delay</param>
            <param name="isFrame">If true, delay is measured in seconds and not </param>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.String,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Enqueue a single function into the end of the queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Enqueue a single function into the end of the queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Enqueue(System.Func{System.Boolean},System.String,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Enqueue a single function into the end of the queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Enqueue(System.Func{System.Boolean},ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Enqueue a single function into the end of the queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Enqueue(System.Action,System.String,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Enqueue a single action into the end of the queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Enqueue(System.Action,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Enqueue a single action into the end of the queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.EnqueueTask(ECommons.Automation.NeoTaskManager.TaskManagerTask)">
            <summary>
            Enqueues a single task into the end of the queue.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.EnqueueMulti(ECommons.Automation.NeoTaskManager.TaskManagerTask[])">
            <summary>
            Enqueues specified tasks into the end of the queue.
            </summary>
            <param name="tasks">Sequence of tasks to enqueue</param>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Insert(System.Func{System.Nullable{System.Boolean}},System.String,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Insert a single function into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Insert(System.Func{System.Nullable{System.Boolean}},ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Insert a single function into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Insert(System.Func{System.Boolean},System.String,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Insert a single function into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Insert(System.Func{System.Boolean},ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Insert a single function into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Insert(System.Action,System.String,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Insert a single action into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.Insert(System.Action,ECommons.Automation.NeoTaskManager.TaskManagerConfiguration)">
            <summary>
            Insert a single action into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.InsertTask(ECommons.Automation.NeoTaskManager.TaskManagerTask)">
            <summary>
            Inserts a single task into the beginning of the queue. Warning! You can not replace EnqueueImmediate calls from legacy task manager with this. Insert an entire range of tasks instead.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.InsertMulti(ECommons.Automation.NeoTaskManager.TaskManagerTask[])">
            <summary>
            Inserts specified tasks into the beginning of the queue, preserving the order. Is similar to Legacy Task Manager's InsertImmediate, except you can have unlimited nested calls.
            </summary>
            <param name="tasks">Sequence of tasks to Insert</param>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.Stack">
            <summary>
            Provides temporary dedicated storage for tasks where tasks are put for future use.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManager.IsStackActive">
            <summary>
            Whether stack mode is active. When active, newly enqueued and inserted tasks go into stack instead of main queue.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.BeginStack">
            <summary>
            Enables stack mode. Euqueue and Insert calls will go into the stack instead of queue after this call.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.EnqueueStack">
            <summary>
            Enqueues the whole stack of tasks into the end of primary queue, disables stack mode and clears the stack afterwards.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.InsertStack">
            <summary>
            Inserts the whole stack of tasks into the beginning of primary queue, disables stack mode and clears the stack afterwards.
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManager.DiscardStack">
            <summary>
            Disables stack mode and clears the stack.
            </summary>
        </member>
        <member name="T:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration">
            <summary>
            Configuration class that defines TaskManager's behavior. In case task's configuration is not set or any it's property is null, default task manager configuration will be used. Default configuration is always present and can't have null properties.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.TimeLimitMS">
            <summary>
            After this amount of time task will fail. Default is 30000 (30s).
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.AbortOnTimeout">
            <summary>
            Whether to clear entire queue of tasks if one of them times out. Otherwise, only timed out task will be discarded and the rest will continue to execute. Default is true.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.AbortOnError">
            <summary>
            Whether to clear entire queue of tasks if one of them produces an exception. Otherwise, only errored task will be discarded and the rest will continue to execute. Default is true.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.TimeoutSilently">
            <summary>
            Whether to suppress any output when task times out. Default is false.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.ShowDebug">
            <summary>
            Whether to output debug information to console. Use in development or testing. Default is false.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.ShowError">
            <summary>
            Whether to output errors to console. Default is true.
            </summary>
        </member>
        <member name="P:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.ExecuteDefaultConfigurationEvents">
            <summary>
            Whether to always execute events that are registered in default configuration. Otherwise, default configuration's events will only be used when per-task configuration is missing. Default is true.
            </summary>
        </member>
        <member name="T:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.OnTaskExceptionDelegate">
            <summary>
            Event that is fired when execution of a task results in an exception.
            </summary>
            <param name="task"></param>
            <param name="exception">An exception thrown by the task</param>
            <param name="continue">Whether task should continue to be executed</param>
            <param name="abort">Whether to change abort behavior. Keep <see langword="null"/> to apply configuration settings, change to <see langword="true"/> to abort entire operation, change to <see langword="false"/> to only discard errored task. Has no effect if <paramref name="continue"/> was set to <see langword="true"/>.</param>
        </member>
        <member name="E:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.OnTaskException">
            <summary>
            Event that is fired when execution of a task results in an exception.
            </summary>
        </member>
        <member name="T:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.OnTaskTimeoutDelegate">
            <summary>
            Event that is fired when task times out.
            </summary>
            <param name="task"></param>
            <param name="remainingTimeMS">Changing this option will grand a task additional time to execute.</param>
        </member>
        <member name="E:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.OnTaskTimeout">
            <summary>
            Event that is fired when task times out.
            </summary>
        </member>
        <member name="T:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.OnTaskCompletionDelegate">
            <summary>
            Event that is fired when task is completed. Fired when task returns either true (a signal to proceed to execute next task) or null (a signal to cancel current task queue).
            </summary>
            <param name="task"></param>
            <param name="isCompleted">Change execution result. Changing it to false will result in task being executed again, changing it to null will cancel current task queue.</param>
        </member>
        <member name="E:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.OnTaskCompletion">
            <summary>
            Event that is fired when task is completed. Fired when task returns either true (a signal to proceed to execute next task) or null (a signal to cancel current task queue).
            </summary>
        </member>
        <member name="M:ECommons.Automation.NeoTaskManager.TaskManagerConfiguration.With(ECommons.Automation.NeoTaskManager.TaskManagerConfiguration,System.Boolean)">
            <summary>
            Produces copy of other configuration and fills it's null properties from current configuration.
            </summary>
            <param name="other"></param>
            <param name="copyEvents">Whether to copy events. If true, events from other current configuration will be used, if false - from other.</param>
            <returns></returns>
        </member>
        <member name="T:ECommons.Automation.NeoTaskManager.Tasks.NeoTasks">
            <summary>
            A collection of functions that are very commonly used in various plugins
            </summary>
        </member>
        <member name="M:ECommons.Automation.UIInput.ClickHelper.SendClick(System.String,System.IntPtr)">
            <summary>
            Invoke a click by name. Intended for calling clicks via user-entered strings.
            </summary>
            <param name="clickName">Name of the click, which is ClassName_MethodName.</param>
            <param name="addon">Addon instance.</param>
        </member>
        <member name="M:ECommons.Automation.UIInput.ClickHelper.GetAvailableClicks">
            <summary>
            Return all the click names that can be passed to <see cref="M:ECommons.Automation.UIInput.ClickHelper.SendClick(System.String,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="T:ECommons.Automation.UIInput.EventData">
            <summary>
            Event data.
            </summary>
        </member>
        <member name="M:ECommons.Automation.UIInput.EventData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.Automation.UIInput.EventData"/> class.
            </summary>
        </member>
        <member name="P:ECommons.Automation.UIInput.EventData.Data">
            <summary>
            Gets the data pointer.
            </summary>
        </member>
        <member name="M:ECommons.Automation.UIInput.EventData.ForNormalTarget(System.Void*,System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.Automation.UIInput.EventData"/> class.
            </summary>
            <param name="target">Target.</param>
            <param name="listener">Event listener.</param>
            <returns>Event data.</returns>
        </member>
        <member name="T:ECommons.Automation.UIInput.EventType">
            <summary>
            Various event types.
            </summary>
        </member>
        <member name="T:ECommons.Automation.UIInput.InputData">
            <summary>
            Input data.
            </summary>
        </member>
        <member name="M:ECommons.Automation.UIInput.InputData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.Automation.UIInput.InputData"/> class.
            </summary>
        </member>
        <member name="P:ECommons.Automation.UIInput.InputData.Data">
            <summary>
            Gets the data pointer.
            </summary>
        </member>
        <member name="M:ECommons.Automation.UIInput.InputData.Empty">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.Automation.UIInput.InputData"/> class.
            </summary>
            <returns>Input data.</returns>
        </member>
        <member name="M:ECommons.Automation.UIInput.InputData.ForPopupMenu(FFXIVClientStructs.FFXIV.Client.UI.PopupMenu*,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.Automation.UIInput.InputData"/> class.
            </summary>
            <param name="popupMenu">List popup menu.</param>
            <param name="index">Selected index.</param>
            <returns>Input data.</returns>
        </member>
        <member name="T:ECommons.CircularBuffers.CircularBuffer`1">
            <inheritdoc/>
            <summary>
            Circular buffer.
            
            When writing to a full buffer:
            PushBack -> removes this[0] / Front()
            PushFront -> removes this[Size-1] / Back()
            
            this implementation is inspired by
            http://www.boost.org/doc/libs/1_53_0/libs/circular_buffer/doc/circular_buffer.html
            because I liked their interface.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._start">
            <summary>
            The _start. Index of the first element in buffer.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._end">
            <summary>
            The _end. Index after the last element in the buffer.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._size">
            <summary>
            The _size. Buffer size.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.CircularBuffers.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.CircularBuffers.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
            <param name='items'>
            Items to fill buffer with. Items length must be less than capacity.
            Suggestion: use Skip(x).Take(y).ToArray() to build this argument from
            any enumerable.
            </param>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Capacity">
            <summary>
            Maximum capacity of the buffer. Elements pushed into the buffer after
            maximum capacity is reached (IsFull = true), will remove an element.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.IsFull">
            <summary>
            Boolean indicating if Circular is at full capacity.
            Adding more elements when the buffer is full will
            cause elements to be removed from the other end
            of the buffer.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.IsEmpty">
            <summary>
            True if has no elements.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Size">
            <summary>
            Current buffer size (the number of elements that the buffer has).
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Front">
            <summary>
            Element at the front of the buffer - this[0].
            </summary>
            <returns>The value of the element of type T at the front of the buffer.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Back">
            <summary>
            Element at the back of the buffer - this[Size - 1].
            </summary>
            <returns>The value of the element of type T at the back of the buffer.</returns>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Index access to elements in buffer.
            Index does not loop around like when adding elements,
            valid interval is [0;Size[
            </summary>
            <param name="index">Index of element to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is outside of [; Size[ interval.</exception>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PushBack(`0)">
            <summary>
            Pushes a new element to the back of the buffer. Back()/this[Size-1]
            will now return this element.
            
            When the buffer is full, the element at Front()/this[0] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the back of the buffer</param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PushFront(`0)">
            <summary>
            Pushes a new element to the front of the buffer. Front()/this[0]
            will now return this element.
            
            When the buffer is full, the element at Back()/this[Size-1] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the front of the buffer</param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PopBack">
            <summary>
            Removes the element at the back of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PopFront">
            <summary>
            Removes the element at the front of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Clear">
            <summary>
            Clears the contents of the array. Size = 0, Capacity is unchanged.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal 
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.ToArraySegments">
             <summary>
             Get the contents of the buffer as 2 ArraySegments.
             Respects the logical contents of the buffer, where
             each segment and items in each segment are ordered
             according to insertion.
            
             Fast: does not copy the array elements.
             Useful for methods like <c>Send(IList&lt;ArraySegment&lt;Byte&gt;&gt;)</c>.
             
             <remarks>Segments may be empty.</remarks>
             </summary>
             <returns>An IList with 2 segments corresponding to the buffer content.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this buffer.
            </summary>
            <returns>An enumerator that can be used to iterate this collection.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Increment(System.Int32@)">
            <summary>
            Increments the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Decrement(System.Int32@)">
            <summary>
            Decrements the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts the index in the argument to an index in <code>_buffer</code>
            </summary>
            <returns>
            The transformed index.
            </returns>
            <param name='index'>
            External index.
            </param>
        </member>
        <member name="M:ECommons.Commands.CmdAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="helpMessage"></param>
            <param name="showInHelp"></param>
            <param name="showInHelpPanel">Whether show the major command help on the <seealso cref="T:ImGuiNET.ImGui"/> window</param>
        </member>
        <member name="M:ECommons.Commands.CmdManager.DrawHelp(System.Single)">
            <summary>
            Draw the help panel into the <seealso cref="T:ImGuiNET.ImGui"/> window.
            </summary>
            <param name="indent">The indent of value. 0 means no index, -1 means next line.</param>
        </member>
        <member name="T:ECommons.Configuration.DefaultSerializationFactory">
            <summary>
            Extend this class and override existing methods to create your own serialization factory.
            </summary>
        </member>
        <member name="M:ECommons.Configuration.DefaultSerializationFactory.Deserialize``1(System.String)">
            <summary>
            Deserialization method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Configuration.DefaultSerializationFactory.Serialize(System.Object,System.Boolean)">
            <summary>
            Serialization method
            </summary>
            <param name="config"></param>
            <param name="prettyPrint">A parameter that informs serializar that pretty-print should be used, if possible.</param>
            <returns></returns>
        </member>
        <member name="T:ECommons.Configuration.EzConfig">
            <summary>
            A class that aims to significantly simplify working with Dalamud configuration.
            1. Does not includes type definitions, which allows changing underlying type if it can be deserialized from existing data (list into array...)
            2. Provides anti-corruption mechanism, reducing chance of data loss if game crashes or power goes off during configuration writing
            3. Allows to very easily load default configuration as well as additional configuration, taking path to config folder into account.
            4. Allows you to redefine serializer with your own implementation upon serializing or in general for the whole EzConfig module.
            5. Solves the issues with default Dalamud serialization settings where default values of collection will stay in addition to ones that were deserialized.
            </summary>
        </member>
        <member name="P:ECommons.Configuration.EzConfig.DefaultConfigurationFileName">
            <summary>
            Full path to default configuration file.
            </summary>
        </member>
        <member name="P:ECommons.Configuration.EzConfig.Config">
            <summary>
            Default configuration reference
            </summary>
        </member>
        <member name="P:ECommons.Configuration.EzConfig.DefaultSerializationFactory">
            <summary>
            Default serialization factory. Create a class that extends SerializationFactory, implement your own serializer and deserializer and assign DefaultSerializationFactory to it before loading any configurations to change serializer to your own liking.
            </summary>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.Init``1">
            <summary>
            Loads and returns default configuration file
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.Migrate``1">
            <summary>
            Migrates old default configuration to EzConfig, if applicable. Must be called before Init.
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.Save">
            <summary>
            Saves default configuration file, if applicable. 
            </summary>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.SaveConfiguration(ECommons.Configuration.IEzConfig,System.String,System.Boolean,System.Boolean,ECommons.Configuration.ISerializationFactory,System.Boolean)">
            <summary>
            Saves arbitrary configuration file.
            </summary>
            <param name="Configuration">Configuration instance</param>
            <param name="path">Path to save to</param>
            <param name="prettyPrint">Inform serializer that you want pretty-print your configuration</param>
            <param name="appendConfigDirectory">If true, plugin configuration directory will be added to path</param>
            <param name="serializationFactory">If null, then default factory will be used.</param>
            <param name="writeFileAsync">Whether to perform writing operation in a separate thread. Serialization is performed in current thread.</param>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.LoadConfiguration``1(System.String,System.Boolean,ECommons.Configuration.ISerializationFactory)">
            <summary>
            Loads arbitrary configuration file or creates an empty one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Where to load it from.</param>
            <param name="appendConfigDirectory">If true, plugin configuration directory will be added to path</param>
            <param name="serializationFactory">If null, then default factory will be used.</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelItemHelper.Get(System.Int32)">
            <summary>
            Gets <see cref="T:Lumina.Excel.Sheets.Item"/> by id or null if not found.
            </summary>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelItemHelper.Get(System.UInt32)">
            <summary>
            Gets <see cref="T:Lumina.Excel.Sheets.Item"/> by id or null if not found.
            </summary>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelItemHelper.GetName(System.UInt32,System.Boolean)">
            <summary>
            Gets item name. If name or item is missing, prints item's ID. Item names are stripped off non-text payloads. Results are cached.
            </summary>
            <param name="id"></param>
            <param name="includeID">Force include ID into text</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelItemHelper.GetName(System.Nullable{Lumina.Excel.Sheets.Item},System.Boolean)">
            <summary>
            Gets item name. If name is missing, prints item's ID. Item names are stripped off non-text payloads. Results are cached.
            </summary>
            <param name="item"></param>
            <param name="includeID"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelTerritoryHelper.IsSanctuary(System.UInt32)">
            <summary>
            Checks if territory belongs to main cities, inns, residential areas or houses. 
            </summary>
            <param name="territoryType"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelTerritoryHelper.GetName(System.UInt32,System.Boolean)">
            <summary>
            Gets fancy name for a territory.
            </summary>
            <param name="TerritoryType">Zone ID</param>
            <param name="includeID">Whether to include an ID into name</param>
            <returns>Content finder condition if exists; otherwise - zone name if exists; otherwise - zone ID as a string</returns>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ADV">
            <summary>
            Adventurer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.GLA">
            <summary>
            Gladiator 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.PGL">
            <summary>
            Pugilist 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MRD">
            <summary>
            Marauder 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.LNC">
            <summary>
            Lancer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ARC">
            <summary>
            Archer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.CNJ">
            <summary>
            Conjurer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.THM">
            <summary>
            Thaumaturge
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.CRP">
            <summary>
            Carpenter
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BSM">
            <summary>
            Blacksmith
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ARM">
            <summary>
            Armorer
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.GSM">
            <summary>
            Goldsmith
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.LTW">
            <summary>
            Leatherworker
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.WVR">
            <summary>
            Weaver
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ALC">
            <summary>
            Alchemist
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.CUL">
            <summary>
            Culinarian
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MIN">
            <summary>
            Miner
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BTN">
            <summary>
            Botanist
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.FSH">
            <summary>
            Fisher
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.PLD">
            <summary>
            Paladin 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MNK">
            <summary>
            Monk 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.WAR">
            <summary>
            Warrior 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.DRG">
            <summary>
            Dragoon 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BRD">
            <summary>
            Bard 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.WHM">
            <summary>
            WhiteMage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BLM">
            <summary>
            BlackMage
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ACN">
            <summary>
            Arcanist 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SMN">
            <summary>
            Summoner 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SCH">
            <summary>
            Scholar 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ROG">
            <summary>
            Rogue 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.NIN">
            <summary>
            Ninja 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MCH">
            <summary>
            Machinist 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.DRK">
            <summary>
            DarkKnight 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.AST">
            <summary>
            Astrologian 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SAM">
            <summary>
            Samurai 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.RDM">
            <summary>
            RedMage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BLU">
            <summary>
            BlueMage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.GNB">
            <summary>
            Gunbreaker 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.DNC">
            <summary>
            Dancer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.RPR">
            <summary>
            Reaper 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SGE">
            <summary>
            Sage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.VPR">
            <summary>
            Viper 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.PCT">
            <summary>
            Pictomancer 
            </summary>
        </member>
        <member name="T:ECommons.EzContextMenu.ContextMenuPrefixRemover">
            <summary>
            A helper class to remove context menu prefix that is required by Dalamud. <br></br>
            While removing prefix, please still make sure to give an user indication that menu item is added by the plugin.
            </summary>
        </member>
        <member name="M:ECommons.EzContextMenu.ContextMenuPrefixRemover.Initialize">
            <summary>
            Manual initialization is optional. Initialization will be automatically performed upon first call of <see cref="M:ECommons.EzContextMenu.ContextMenuPrefixRemover.RemovePrefix(Dalamud.Game.Gui.ContextMenu.MenuItem)"/> method.
            </summary>
        </member>
        <member name="M:ECommons.EzContextMenu.ContextMenuPrefixRemover.RemovePrefix(Dalamud.Game.Gui.ContextMenu.MenuItem)">
            <summary>
            Call this extension method to remove prefix from menu item.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:ECommons.EzEventManager.EzFrameworkUpdate">
            <summary>
            Provides wrapped access to Framework.Update event. Disposed automatically upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
        </member>
        <member name="T:ECommons.EzEventManager.EzLogout">
            <summary>
            Provides wrapped access to ClientState.Logout event. Disposed automatically upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
        </member>
        <member name="T:ECommons.EzEventManager.EzTerritoryChanged">
            <summary>
            Provides wrapped access to Framework.Update event. Disposed automatically upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
        </member>
        <member name="T:ECommons.EzHookManager.EzHook`1">
            <summary>
            A wrapper around Dalamud hook. Achieves 2 goals:
            - Auto-disposing all undisposed hooks upon plugin unload;
            - Lazy hooking and completely disposing hook upon disabling;
            - Increasing transparency to developer, indicating that Dalamud's disable method doesn't completely disables it and just pauses detour execution.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ECommons.EzHookManager.EzHook`1.Delegate">
            <summary>
            Delegate that points to provided address which you can call even without enabling your hook. 
            </summary>
        </member>
        <member name="M:ECommons.EzHookManager.EzHook`1.Disable">
            <summary>
            Disabling EzHook disposes underlying hook. 
            </summary>
        </member>
        <member name="P:ECommons.EzHookManager.EzHook`1.Original">
            <summary>
            Calls original function as if it was unhooked if hook is enabled; calls original Delegate if hook is disabled.
            </summary>
        </member>
        <member name="T:ECommons.EzIpcManager.EzIPC">
            <summary>
            Provides easier way to interact with Dalamud IPC.<br></br>
            See EzIPC.md for example use.
            </summary>
        </member>
        <member name="E:ECommons.EzIpcManager.EzIPC.OnSafeInvocationException">
            <summary>
            Event that fires whenever an exception occurs in any of safe invocation wrapper methods.
            </summary>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.Init(System.Object,System.String,ECommons.EzIpcManager.SafeWrapper)">
            <summary>
            Initializes IPC provider and subscriber for an instance type. Static methods or field/properties/properties will be ignored, register them separately via static Init if you must.<br></br>
            Each method that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> or <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be registered for IPC under "Prefix.IPCName" tag. If prefix is not specified, it is your plugin's internal name. If IPCName is not specified, it is method name.<br></br>
            Each Action and Function field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> will be assigned delegate that represents respective GetIPCSubscriber. Each Action field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be assigned to become respective tag's event trigger. Make sure to explicitly specify prefix if you're interacting with other plugin's IPC.<br></br>
            You do not need to dispose IPC methods in any way. Everything is disposed upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
            <param name="instance">Instance of a class that has EzIPC methods and field/properties/properties.</param>
            <param name="prefix">Name prefix</param>
            <param name="safeWrapper">Type of a safe invocation wrapper to be used for IPC calls. Wrappers, when used, will silently drop exceptions and return default object if invocation has failed. You can subscribe to <see cref="E:ECommons.EzIpcManager.EzIPC.OnSafeInvocationException"/> event to observe these exceptions.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>Array of disposal tokens that can be used to dispose registered providers and event subscription. <b>Typical use of EzIPC never has any need to store and deal with these tokens</b>; you only ever need them when you want to unregister IPC before your plugin's Dispose method is called.</returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.Init(System.Type,System.String,ECommons.EzIpcManager.SafeWrapper)">
            <summary>
            Initializes IPC provider and subscriber for a static type.<br></br>
            Each method that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> or <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be registered for IPC under "Prefix.IPCName" tag. If prefix is not specified, it is your plugin's internal name. If IPCName is not specified, it is method name.<br></br>
            Each Action and Function field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> will be assigned delegate that represents respective GetIPCSubscriber. Each Action field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be assigned to become respective tag's event trigger. Make sure to explicitly specify prefix if you're interacting with other plugin's IPC.<br></br>
            You do not need to dispose IPC methods in any way. Everything is disposed upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
            <param name="staticType">Type of a static class that has EzIPC methods and field/properties/properties.</param>
            <param name="prefix">Name prefix</param>
            <param name="safeWrapper">Type of a safe invocation wrapper to be used for IPC calls. Wrappers, when used, will silently drop exceptions and return default object if invocation has failed. You can subscribe to <see cref="E:ECommons.EzIpcManager.EzIPC.OnSafeInvocationException"/> event to observe these exceptions.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>Array of disposal tokens that can be used to dispose registered providers and event subscription. <b>Typical use of EzIPC never has any need to store and deal with these tokens</b>; you only ever need them when you want to unregister IPC before your plugin's Dispose method is called.</returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.FindIpcProvider(System.Int32)">
            <summary>
            Searches for IPC provider function with specified number of generic arguments
            </summary>
            <param name="numGenericArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.FindIpcSubscriber(System.Int32)">
            <summary>
            Searches for IPC subscriber function with specified number of generic arguments
            </summary>
            <param name="numGenericArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCAttribute.#ctor(System.String,System.Boolean,System.Type,ECommons.EzIpcManager.SafeWrapper)">
            <summary>
            Initializes <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/>.
            </summary>
            <param name="iPCName">IPC method name.</param>
            <param name="applyPrefix">Whether to apply prefix before name or not.</param>
            <param name="actionLastGenericType">Dummy return type used as a last generic argument for actions. When omitted, typeof(object) is used.</param>
            <param name="wrapper">Wrapper type</param>
        </member>
        <member name="T:ECommons.EzIpcManager.EzIPCDisposalToken">
            <summary>
            Represents EzIPC token, which can be used to manually dispose IPC when you want fine-grained control over disposing IPC. Any undisposed tokens are disposed during ECommonsMain's dispose so <b>you do not need to manually dispose tokens</b>.
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.EzIPCDisposalToken.IpcTag">
            <summary>
            Full IPC tag
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.EzIPCDisposalToken.IsEvent">
            <summary>
            Whether the token is event subscription
            </summary>
        </member>
        <member name="P:ECommons.EzIpcManager.EzIPCDisposalToken.IsDisposed">
            <summary>
            Whether the token was already disposed
            </summary>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCDisposalToken.Dispose">
            <summary>
            Disposes token, unregistering IPC provider or event subscription, if not already disposed.<br></br>
            <b>You do not need to call this method unless you specifically want to unregister your IPC before plugin unloads.</b>
            </summary>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCEventAttribute.#ctor(System.String,System.Boolean,System.Type)">
            <summary>
            Initializes <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/>.
            </summary>
            <param name="iPCName">IPC method name.</param>
            <param name="applyPrefix">Whether to apply prefix before name or not.</param>
            /// <param name="actionLastGenericType">Dummy return type used as a last generic argument for actions. When omitted, typeof(object) is used.</param>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``1(System.Action{``0},``0)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke(System.Action)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``4(System.Func{``0,``1,``2,``3},``0,``1,``2,``3@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``3(System.Func{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``2(System.Func{``0,``1},``0,``1@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``1(System.Func{``0},``0@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.None">
            <summary>
            Directly call IPC, don't use any wrapper
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.IPCException">
            <summary>
            Only catch and discard IPCException
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.AnyException">
            <summary>
            Catch and discard all exceptions
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.Inherit">
            <summary>
            Inherit default setting from <see cref="M:ECommons.EzIpcManager.EzIPC.Init(System.Object,System.String,ECommons.EzIpcManager.SafeWrapper)"/> call
            </summary>
        </member>
        <member name="T:ECommons.EzSharedDataManager.EzSharedData">
            <summary>
            EzSharedData class aims to resolve following problems with built-in SharedData service.
            - It will automatically relinquish data upon plugin disposal, unless specifically instructed otherwise
            - You can use TryGet continuously and there will ever be only one usage instance, you do not have to worry about holding reference yourself. Although, this is slower than creating and holding reference yourself so please obtain and hold reference to the data in performance-critical functions such as Framework Update.
            </summary>
        </member>
        <member name="M:ECommons.EzSharedDataManager.EzSharedData.TryGet``1(System.String,``0@,ECommons.EzSharedDataManager.CreationMode,``0)">
            <summary>
            Attempts to get existing data or create new data.
            </summary>
            <typeparam name="T">Data type. Note that only reference type works. If you need to use value type, use array and put one element there. Only .NET, Dalamud and Dalamud's libraries types; no submodules, nuget packages and your own custom-defined types. If you need to share complex structure, please use tuples and Alias any type feature https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-12.0/using-alias-types</typeparam>
            <param name="Name">Shared data name. Please prefix it with your plugin's name.</param>
            <param name="Data">Obtained reference.</param>
            <param name="Mode">Creation mode, if any is needed.</param>
            <param name="DefaultValue">Default value when creating data that doesn't exists.</param>
            <returns>Whether data could be obtained</returns>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.PlayerCharacterSelf">
            <summary>
            Represents the player's own character.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.InDutyPartyMember">
            <summary>
            Represents another party member in duty (job agnostic, likely only applicable in PVP).
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.InDutyPCNotInParty">
            <summary>
            Represents another player character in duty but not in the party.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.EnemyMalestromPVPPC">
            <summary>
            Represents an enemy player character in Maelstrom PVP.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.EnemyAdderPVPPC">
            <summary>
            Represents an enemy player character in Adder PVP.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.EnemyFlamesPVPPC">
            <summary>
            Represents an enemy player character in Flames PVP.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.HostileNotEngaged">
            <summary>
            Represents a hostile character that is not engaged.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.Dead">
            <summary>
            Represents a dead character.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.HostileEngagedSelfDamaged">
            <summary>
            Represents a hostile character engaged with the player and damaged.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.HostileEngagedOther">
            <summary>
            Represents a hostile character engaged with another player.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.HostileEngagedSelfUndamaged">
            <summary>
            Represents a hostile character engaged with the player but undamaged.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.FriendlyBattleNPC">
            <summary>
            Represents a friendly battle NPC.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.PlayerCharacterChocobo">
            <summary>
            Represents the player's own chocobo.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.OtherPlayerCharacterChocobo">
            <summary>
            Represents another player's chocobo.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.OtherAlliancePlayerCharacter">
            <summary>
            Represents another player character in another alliance.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.AnyPlayerCharacterDead">
            <summary>
            Represents any dead player character.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.OutOfDutyandPartyPC">
            <summary>
            Represents another player character out of duty and party.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.InDutyPCInPartyTank">
            <summary>
            Represents another tank role player character in duty and in party.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.InDutyPCInPartyHealer">
            <summary>
            Represents another healer role player character in duty and in party.
            </summary>
        </member>
        <member name="F:ECommons.GameFunctions.NameplateKind.InDutyPCInPartyDPS">
            <summary>
            Represents another DPS role player character in duty and in party.
            </summary>
        </member>
        <member name="T:ECommons.GameHelpers.ContentType">
            <summary>
                Primary types of actual (in regard to combat) content in the game.
            </summary>
            <seealso cref="M:ECommons.GameHelpers.Content.DetermineContentType(ECommons.GameHelpers.ContentType)" />
        </member>
        <member name="F:ECommons.GameHelpers.ContentType.OverWorld">
            <summary>
                This encompasses anything that isn't in a roulette or a field operation,
                quest instances, actual over world content, housing, for-fun content,
                etc.
            </summary>
        </member>
        <member name="F:ECommons.GameHelpers.ContentType.Criterion">
            This includes Criterion Savage
        </member>
        <member name="F:ECommons.GameHelpers.ContentType.FieldOperations">
            Bozja, Eureka, Diadem, etc.
        </member>
        <member name="F:ECommons.GameHelpers.ContentType.FieldRaid">
            Delubrum Reginae, Dalriada, etc.
        </member>
        <member name="T:ECommons.GameHelpers.ContentDifficulty">
            <summary>
                All the difficulties of content in the game.
            </summary>
            <seealso cref="M:ECommons.GameHelpers.Content.DetermineContentDifficulty(ECommons.GameHelpers.ContentDifficulty)" />
        </member>
        <member name="F:ECommons.GameHelpers.ContentDifficulty.Normal">
            <summary>
                This encompasses anything that doesn't otherwise have an explicit
                difficulty, or is the lowest difficulty, variant dungeons, field raids,
                etc.
            </summary>
        </member>
        <member name="F:ECommons.GameHelpers.ContentDifficulty.FieldRaidsSavage">
            Only Delubrum Reginae Savage
        </member>
        <member name="T:ECommons.GameHelpers.Content">
            <summary>
                Organization of the biggest pieces of data about the content the user is
                currently engaged in.
            </summary>
            <remarks>
                This entire class is skewed towards identifying 'standard' PvE combat content,
                as in content in roulettes and the higher end.
            </remarks>
        </member>
        <member name="P:ECommons.GameHelpers.Content.TerritoryID">
            <summary>
                The ID of the current territory the player is in.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.TerritoryNameResult">
            <summary>
                The result of the TerritoryName builder.
            </summary>
            <seealso cref="M:ECommons.TerritoryName.GetTerritoryName(System.UInt32)" />
        </member>
        <member name="P:ECommons.GameHelpers.Content.TerritoryNameResolved">
            <summary>
                Whether the TerritoryName came out successfully from the builder.
            </summary>
            <seealso cref="P:ECommons.GameHelpers.Content.TerritoryNameResult" />
            <seealso cref="P:ECommons.GameHelpers.Content.TerritoryName" />
        </member>
        <member name="P:ECommons.GameHelpers.Content.TerritoryName">
            <summary>
                The zone name of the current territory the player is in.
            </summary>
            <value><c>null</c> when not resolved.</value>
            <seealso cref="M:ECommons.TerritoryName.GetTerritoryName(System.UInt32)" />
            <seealso cref="P:ECommons.GameHelpers.Content.TerritoryNameResolved" />
            <seealso cref="P:ECommons.GameHelpers.Content.TerritoryNameResult" />
        </member>
        <member name="P:ECommons.GameHelpers.Content.TerritoryTypeRow">
            <summary>
                The Sheet row for the current <see cref="T:Lumina.Excel.Sheets.TerritoryType" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.MapID">
            <summary>
                The ID of the current map the player is in.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.TerritoryIntendedUse">
            <summary>
                The intended use of the current territory the player is in.
            </summary>
            <seealso cref="T:ECommons.ExcelServices.TerritoryIntendedUseEnum" />
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentFinderConditionRow">
            <summary>
                The Sheet row for the current <see cref="T:Lumina.Excel.Sheets.ContentFinderCondition" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentName">
            <summary>
                The content name of the current territory the player is in.
            </summary>
            <value>
                Falls back to <see cref="P:ECommons.GameHelpers.Content.TerritoryName" /> when
                <see cref="T:Lumina.Excel.Sheets.ContentFinderCondition">CFC Data</see> is not resolved.<br />
                <c>null</c> when <see cref="P:ECommons.GameHelpers.Content.TerritoryName" /> is also not
                resolved.
            </value>
            <seealso cref="T:Lumina.Excel.Sheets.ContentFinderCondition" />
            <seealso cref="P:ECommons.GameHelpers.Content.ContentFinderConditionRow" />
        </member>
        <member name="P:ECommons.GameHelpers.Content.AllowUndersized">
            <summary>
                If the content allows Undersized (Unrestricted) Parties.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.HighEndDuty">
            <summary>
                If the content is listed under High-End Content in the Duty Finder.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentDifficultyFromNameResolved">
            <summary>
                Whether the difficulty was found in the <see cref="P:ECommons.GameHelpers.Content.ContentName" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentDifficultyFromName">
            <summary>
                The title case difficulty of the content as found in the
                <see cref="P:ECommons.GameHelpers.Content.ContentName" />.
            </summary>
            <value>
                <c>null</c> when not
                <see cref="P:ECommons.GameHelpers.Content.ContentDifficultyFromNameResolved">resolved</see> or when
                <see cref="P:ECommons.GameHelpers.Content.ContentFinderConditionRow" /> is null.
            </value>
        </member>
        <member name="P:ECommons.GameHelpers.Content.InstanceContentRow">
            <summary>
                The Sheet row for the current <see cref="T:Lumina.Excel.Sheets.InstanceContent" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.TimeLimit">
            <summary>
                The number of minutes the current piece of content is restricted to.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentTypeRow">
            <summary>
                The Sheet row for the current <see cref="P:ECommons.GameHelpers.Content.ContentType" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentTypeRowId">
            <summary>
                The Row ID of the current <see cref="T:Lumina.Excel.Sheets.ContentType" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentTypeName">
            <summary>
                The name of the current <see cref="T:Lumina.Excel.Sheets.ContentType" />.
            </summary>
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentType">
            <summary>
                The determined <see cref="P:ECommons.GameHelpers.Content.ContentType" /> of the current content.
            </summary>
            <seealso cref="M:ECommons.GameHelpers.Content.DetermineContentType(ECommons.GameHelpers.ContentType)" />
        </member>
        <member name="P:ECommons.GameHelpers.Content.ContentDifficulty">
            <summary>
                The determined <see cref="P:ECommons.GameHelpers.Content.ContentDifficulty" /> of the current content.
            </summary>
            <seealso cref="M:ECommons.GameHelpers.Content.DetermineContentDifficulty(ECommons.GameHelpers.ContentDifficulty)" />
        </member>
        <member name="M:ECommons.GameHelpers.Content.DetermineContentType(ECommons.GameHelpers.ContentType)">
            <summary>
                A rigorous switch to categorize the (combat-focused) type of content that
                the user is currently in; primarily using
                <see cref="P:ECommons.GameHelpers.Content.TerritoryIntendedUse" />.
            </summary>
            <param name="default">
                The default content type to return if the switch doesn't resolve to anything.
                <br />
                Primarily here to make it easier in the future if this method is to get
                more rigorous in regard to what returns as
                <see cref="F:ECommons.GameHelpers.ContentType.OverWorld" />.
            </param>
            <returns>The determined <see cref="P:ECommons.GameHelpers.Content.ContentType" />.</returns>
        </member>
        <member name="M:ECommons.GameHelpers.Content.DetermineContentDifficulty(ECommons.GameHelpers.ContentDifficulty)">
            <summary>
                A rigorous switch to categorize the difficulty of the content the user is
                currently in; primarily using <see cref="P:ECommons.GameHelpers.Content.ContentFinderConditionRow" />.
            </summary>
            <param name="default">
                The default content difficulty to return if the switch doesn't resolve to
                anything.<br />
                Primarily here to make it easier in the future if this method is to get
                more rigorous in regard to what returns as
                <see cref="F:ECommons.GameHelpers.ContentDifficulty.Normal" />.
            </param>
            <returns>The determined <see cref="P:ECommons.GameHelpers.Content.ContentDifficulty" />.</returns>
        </member>
        <member name="F:ECommons.Gamepad.GamePad.ControllerButtons">
            <summary>
            Dictionary containing a mapping of <see cref="T:Dalamud.Game.ClientState.GamePad.GamepadButtons"/> to Playstation / Xbox button names.
            </summary>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsControllerEnabled">
            <summary>
            Gets the "Enable gamepad" option from FFXIV to indicate if the gamepad has been enabled in FFXIV.
            </summary>
            <returns>FFXIV is using a controller.</returns>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsButtonPressed(Dalamud.Game.ClientState.GamePad.GamepadButtons)">
            <summary>
            Checks if a controller button has been pressed. Only true on the first frame it has been pressed.
            </summary>
            <param name="button">Button to check.</param>
            <returns>Button has just been pressed.</returns>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsButtonHeld(Dalamud.Game.ClientState.GamePad.GamepadButtons)">
            <summary>
            Checks if a controller button is currently held. Returns true for every frame it's held down.
            </summary>
            <param name="button">Button to check.</param>
            <returns>Button is being held down.</returns>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsButtonJustReleased(Dalamud.Game.ClientState.GamePad.GamepadButtons)">
            <summary>
            Checks if a controller button has just been released. Only true on the first frame after releasing.
            </summary>
            <param name="button">Button to check.</param>
            <returns>Button has just been released.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetNodeByIDChain(FFXIVClientStructs.FFXIV.Component.GUI.AtkResNode*,System.Int32[])">
            <summary>
            Gets a node given a chain of node IDs
            </summary>
            <param name="node">Root node of the addon</param>
            <param name="ids">Node IDs (starting from root) to the desired node</param>
        </member>
        <member name="M:ECommons.GenericHelpers.GetRootNode(FFXIVClientStructs.FFXIV.Component.GUI.AtkResNode*)">
            <summary>
            Recursively gets the root node of an addon
            </summary>
            <param name="node">Starting node to search from</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsSelectItemEnabled(FFXIVClientStructs.FFXIV.Component.GUI.AtkTextNode*)">
            <summary>
            Attempts to find out whether SelectString entry is enabled based on text color. 
            </summary>
            <param name="textNodePtr"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsScreenReady">
            <summary>
            Returns <see langword="true"/> if screen isn't faded. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetAddonMaster``1(System.String,``0@)">
            <summary>
            Slower than <see cref="M:ECommons.GenericHelpers.TryGetAddonByName``1(System.String,``0*@)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="addon"></param>
            <param name="addonMaster"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetAddonByName``1(System.String,``0*@)">
            <summary>
            Attempts to get first instance of addon by name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Addon"></param>
            <param name="AddonPtr"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all <paramref name="values"/> to the <paramref name="collection"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="values"></param>
        </member>
        <member name="M:ECommons.GenericHelpers.GetRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns random element from <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SafeSelect``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <inheritdoc cref="M:ECommons.GenericHelpers.SafeSelect``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)"/>
        </member>
        <member name="M:ECommons.GenericHelpers.SafeSelect``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Safely selects a value from a <paramref name="dictionary"/>. Does not throws exceptions under any circumstances.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue">Returns if <paramref name="dictionary"/> is <see langword="null"/> or <paramref name="key"/> is <see langword="null"/> or <paramref name="key"/> is not found in <paramref name="dictionary"/></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SafeSelect``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            Safely selects an entry of the <paramref name="list"/> at a specified <paramref name="index"/>, returning default value if index is out of range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SafeSelect``1(``0[],System.Int32)">
            <summary>
            Safely selects an entry of the <paramref name="array"/> at a specified <paramref name="index"/>, returning <see langword="default"/> value if index is out of range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryDequeue``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Treats list as a queue, removing and returning element at index 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Dequeue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Treats list as a queue, removing and returning element at index 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ECommons.GenericHelpers.DequeueOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Treats list as a queue, removing and returning element at index 0 or default value if there's nothing to dequeue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.DequeueOrDefault``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Dequeues element from queue or returns default value if there's nothing to dequeue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Queue"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Searches index of first element in IEnumerable that matches the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Searches index of first element in IEnumerable that matches the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Add``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Tries to add multiple items to collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection</param>
            <param name="values">Items</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Remove``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Tries to remove multiple items to collection. In case if few of the same values are present in the collection, only first will be removed.
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection</param>
            <param name="values">Items</param>
        </member>
        <member name="M:ECommons.GenericHelpers.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Retrieves a value from dictionary, adding it first if it doesn't exists yet.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes action for each element of collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="function"></param>
        </member>
        <member name="M:ECommons.GenericHelpers.Toggle``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Adds <paramref name="value"/> into HashSet if it doesn't exists yet or removes if it exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashSet"></param>
            <param name="value"></param>
            <returns>Whether <paramref name="hashSet"/> contains <paramref name="value"/> after function has been executed.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Attempts to get first element of <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to get first element of IEnumerable
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate">Function to test elements.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetLast``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to get last element of <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate">Function to test elements.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.AsUInt32(System.Single)">
            <summary>
            Returns <see cref="T:System.UInt32"/> representation of <see cref="T:System.Single"/>.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.AsFloat(System.UInt32)">
            <summary>
            Converts <see cref="T:System.UInt32"/> representation of <see cref="T:System.Single"/> into <see cref="T:System.Single"/>.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ParseInt(System.String)">
            <summary>
            Attempts to parse integer
            </summary>
            <param name="number">Input string</param>
            <returns>Integer if parsing was successful, <see langword="null"/> if failed</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryParseByteArray(System.String,System.Byte[]@,System.Char)">
            <summary>
            Attempts to parse byte array string separated by specified character.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ToHexString(System.Collections.Generic.IEnumerable{System.Byte},System.Char)">
            <summary>
            Converts byte array to hex string where bytes are separated by a specified character
            </summary>
            <param name="bytes"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Range(System.UInt32,System.UInt32)">
            <summary>
            Generates range of numbers with step = 1.
            </summary>
            <param name="inclusiveStart"></param>
            <param name="inclusiveEnd"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Range(System.Int32,System.Int32)">
            <summary>
            Generates range of numbers with step = 1.
            </summary>
            <param name="inclusiveStart"></param>
            <param name="inclusiveEnd"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetCallStackID(System.Int32)">
            <summary>
            Retrieves entries from call stack in a form of single string. <b>Expensive.</b>
            </summary>
            <param name="maxFrames"></param>
            <returns></returns>
        </member>
        <member name="F:ECommons.GenericHelpers.UseAsyncKeyCheck">
            <summary>
            Sets whether <see cref="M:PInvoke.User32.GetKeyState(System.Int32)"/> or <see cref="M:PInvoke.User32.GetAsyncKeyState(System.Int32)"/> will be used when calling <see cref="!:IsKeyPressed(Keys)"/> or <see cref="M:ECommons.GenericHelpers.IsKeyPressed(ECommons.Interop.LimitedKeys)"/>
            </summary>
        </member>
        <member name="M:ECommons.GenericHelpers.IsKeyPressed(System.Int32)">
            <summary>
            Checks if a key is pressed via winapi.
            </summary>
            <param name="key">Key</param>
            <returns>Whether the key is currently pressed</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsKeyPressed(ECommons.Interop.LimitedKeys)">
            <summary>
            Checks if a key is pressed via winapi.
            </summary>
            <param name="key">Key</param>
            <returns>Whether the key is currently pressed</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsTarget(Dalamud.Game.ClientState.Objects.Types.IGameObject)">
            <summary>
            Checks if you are targeting object <paramref name="obj"/>.
            </summary>
            <param name="obj">Object to check</param>
            <returns>Whether you are targeting object <paramref name="obj"/>; <see langword="false"/> if <paramref name="obj"/> is <see langword="null"/></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.JSONClone``1(``0)">
            <summary>
            Serializes and then deserializes object, returning result of deserialization using <see cref="N:Newtonsoft.Json"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns>Deserialized copy of <paramref name="obj"/></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryDecodeSender(Dalamud.Game.Text.SeStringHandling.SeString,ECommons.ChatMethods.Sender@)">
            <summary>
            Attempts to parse player in a <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>. 
            </summary>
            <param name="sender"><see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/> from which to read player</param>
            <param name="senderStruct">Resulting player data</param>
            <returns>Whether operation succeeded</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Copy(System.String,System.Boolean)">
            <summary>
            Copies text into user's clipboard using WinForms. Does not throws exceptions.
            </summary>
            <param name="text">Text to copy</param>
            <param name="silent">Whether to display success/failure popup</param>
            <returns>Whether operation succeeded</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Paste(System.Boolean)">
            <summary>
            Reads text from user's clipboard
            </summary>
            <param name="silent">Whether to display popup when error occurs.</param>
            <returns>Contents of the clipboard; null if clipboard couldn't be read.</returns>
            <remarks>Be sure to run on the framework/draw thread if using ImGui to avoid potential crashes.</remarks>
        </member>
        <member name="M:ECommons.GenericHelpers.Cleanup(System.String)">
            <summary>
            Removes whitespaces, line breaks, tabs, etc from string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.NullWhenFalse(System.String,System.Boolean)">
            <summary>
            Returns <paramref name="s"/> when <paramref name="b"/> is <see langword="true"/>, <see langword="null"/> otherwise
            </summary>
            <param name="s"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetText(Lumina.Text.ReadOnly.ReadOnlySeString,System.Boolean)">
            <summary>
            Discards any non-text payloads from <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>
            </summary>
            <param name="s"></param>
            <param name="onlyFirst">Whether to find first text payload and only return it</param>
            <returns>String that only includes text payloads</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetText(FFXIVClientStructs.FFXIV.Client.System.String.Utf8String,System.Boolean)">
            <summary>
            Reads SeString from unmanaged memory and discards any non-text payloads from <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>
            </summary>
            <param name="s"></param>
            <param name="onlyFirst">Whether to find first text payload and only return it</param>
            <returns>String that only includes text payloads</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetText(Dalamud.Game.Text.SeStringHandling.SeString,System.Boolean)">
            <summary>
            Discards any non-text payloads from <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>
            </summary>
            <param name="seStr"></param>
            <param name="onlyFirst">Whether to find first text payload and only return it</param>
            <returns>String that only includes text payloads</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Read(FFXIVClientStructs.FFXIV.Client.System.String.Utf8String)">
            <summary>
            Reads SeString.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Read(System.Span{System.Byte})">
            <summary>
            Reads Span of bytes into <see langword="string"/>.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Hooks.ActionEffect.Init(System.Action{System.UInt32,System.UInt16,ECommons.Hooks.ActionEffectTypes.ActionEffectType,System.UInt32,System.UInt64,System.UInt32},System.Boolean)">
            <summary>
            
            </summary>
            <param name="fullParamsCallback">uint ActionID, ushort animationID, ActionEffectType type, uint sourceID, ulong targetOID, uint damage</param>
            <param name="logging"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:ECommons.Hooks.ActionEffectTypes.TargetEffect.Item(System.Int32)">
            <summary>
            Get Effect.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ECommons.ImGuiMethods.EColor">
            <summary>
            A set of fancy color for use in plugins. You can redefine them after calling ECommonsMain.Init to match necessary style!
            </summary>
        </member>
        <member name="T:ECommons.ImGuiMethods.EzColor">
            <summary>
            Unified colour wrapper. Implicitly converts to needed formats and supports importing from most formats.
            </summary>
            <remarks>
            <para>Contains built in redefinable colors (refinable after calling ECommonsMain.Init)</para>
            </remarks>
        </member>
        <member name="M:ECommons.ImGuiMethods.EzColor.#ctor(System.UInt32)">
            <summary>
            Takes in uints as 0xRRGGBB or 0xRRGGBBAA
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.EzColor.From(System.UInt32)">
            <summary>
            Takes in uints as 0xRRGGBB or 0xRRGGBBAA
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.Action)">
            <summary>
            Draws a line on the right side of the window. Without specifying ID explicitly, you may only draw one line per unique action.
            </summary>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.Action,System.Single@)">
            <summary>
            Draws a line on the right side of the window. Without specifying ID explicitly, you may only draw one line per unique action.
            </summary>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
            <param name="width">Calculated width of your line.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.String,System.Action)">
            <summary>
            Draws a line on the right side of the window.
            </summary>
            <param name="id">Unique ID of a line.</param>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.String,System.Action,System.Single@,System.Nullable{System.Single})">
            <summary>
            Draws a line on the right side of the window.
            </summary>
            <param name="id">Unique ID of a line.</param>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
            <param name="width">Calculated width of your line.</param>
            <param name="contentRegionAvailX">Override content region avail if needed</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.InputWithRightButtonsArea(System.String,System.Action,System.Action)">
            <summary>
            Convenient way to display stretched input with button or other elements on it's right side.
            </summary>
            <param name="id">Unique ID</param>
            <param name="inputAction">A single element that accepts transformation by ImGui.SetNextItemWidth method</param>
            <param name="rightAction">A line of elements on the right side. Can contain multiple elements but only one line.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCopy(System.String,System.String)">
            <summary>
            Draws a button that will copy text to clipboard when clicked.
            </summary>
            <remarks>Will also replace any <c>$COPY</c> in the button text with the text to copy</remarks>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonWrapped(System.String)">
            <summary>
            Draws a button that will be on the same line as previous if there is space, otherwise will move to the next line.
            </summary>
            <param name="label">Button label</param>
            <remarks><see cref="M:ImGuiNET.ImGui.SameLine"/> does not need to be called just before using this.</remarks>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCtrl(System.String,System.Nullable{System.Numerics.Vector2},System.String)">
            <summary>
            Button that is disabled unless CTRL key is held
            </summary>
            <param name="text">Button ID</param>
            <param name="size">Optional size of the button, null if size is to be calculated automatically</param>
            <param name="affix">Button affix</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Boolean@,System.Boolean)">
            <summary>
            Draws a button that acts like a checkbox.
            </summary>
            <param name="name">Button text</param>
            <param name="value">Value</param>
            <param name="smallButton">Whether button should be small</param>
            <returns>true when clicked, otherwise false</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Boolean@,System.UInt32,System.Boolean)">
            <summary>
            Draws a button that acts like a checkbox.
            </summary>
            <param name="name">Button text</param>
            <param name="value">Value</param>
            <param name="color">Active button color</param>
            <param name="smallButton">Whether button should be small</param>
            <returns>true when clicked, otherwise false</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Boolean@,System.Numerics.Vector4,System.Boolean)">
            <summary>
            Draws a button that acts like a checkbox.
            </summary>
            <param name="name">Button text</param>
            <param name="value">Value</param>
            <param name="color">Active button color</param>
            <param name="smallButton">Whether button should be small</param>
            <returns>true when clicked, otherwise false</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Nullable{System.Boolean}@,System.Nullable{System.Numerics.Vector4},System.Nullable{System.Numerics.Vector4},System.Boolean)">
            <summary>
            Provides a button that can be used to switch <see langword="bool"/>? variables. Left click - to toggle between <see langword="true"/> and <see langword="null"/>, right click - to toggle between <see langword="false"/> and <see langword="null"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="TrueColor">Color when <paramref name="value"/> is true</param>
            <param name="FalseColor">Color when <paramref name="value"/> is false</param>
            <param name="smallButton">Whether a button should be small</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CheckboxBullet(System.String,System.Boolean@)">
            <summary>
            <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/> that has bullet marker instead of normal check mark when enabled.
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CheckboxInverted(System.String,System.Boolean@)">
            <summary>
            Inverted <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/>
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Checkbox(System.String,System.Int32@)">
            <summary>
            <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/> that accepts int as a bool. 0 is false, 1 is true.
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Checkbox(System.String,System.Nullable{System.Boolean}@)">
            <summary>
            Tri-way <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/>. Null will be displayed as a bullet. Switching order: false -> null -> true.
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CheckboxWrapped(System.String,System.Boolean@)">
            <summary>
            Draws a checkbox that will be on the same line as previous if there is space, otherwise will move to the next line.
            </summary>
            <param name="label">Checkbox label</param>
            <param name="v">Boolean to toggle</param>
            <remarks><see cref="M:ImGuiNET.ImGui.SameLine"/> does not need to be called just before using this.</remarks>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CollectionCheckbox``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0},System.Boolean,System.Boolean)">
            <summary>
            Checkbox that adds/removes a set of values from the collection. Displays check mark when element is present in a collection, and doesn't displays checkmark when element is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="label"></param>
            <param name="values">A set of values to add/remove</param>
            <param name="collection">A collection that will be modified</param>
            <param name="inverted">Whether to invert checkbox. Not implemented.</param>
            <param name="delayedOperation">When set to true, will schedule the change in next framework update. Useful when you want to modify a collection while iterating over it.</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CollectionCheckbox``1(System.String,``0,System.Collections.Generic.ICollection{``0},System.Boolean,System.Boolean)">
            <summary>
            Checkbox that adds/removes a value from the collection. Displays check mark when element is present in a collection, and doesn't displays checkmark when element is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="label"></param>
            <param name="value">A value to add/remove</param>
            <param name="collection">A collection that will be modified</param>
            <param name="inverted">Whether to invert checkbox.</param>
            <param name="delayedOperation">When set to true, will schedule the change in next framework update. Useful when you want to modify a collection while iterating over it.</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.Begin">
            <summary>
            Step 1. Call this before table begins.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.NextRow">
            <summary>
            Step 2. Call this in the beginning of table's row (first column). This function just stores cursor.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.DrawButtonDummy(`0,System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Step 3. Call this where you want your button be.
            </summary>
            <param name="item"></param>
            <param name="list"></param>
            <param name="targetPosition"></param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.DrawButtonDummy(System.String,System.Collections.Generic.IList{`0},System.Int32)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.DrawButtonDummy(`0,System.Collections.Generic.IList{`0},System.Int32)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.DrawButtonDummy(System.String,System.Action{System.String})">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.DrawButtonDummy(`0,System.Collections.Generic.IList{`0},System.Int32)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.SetRowColor(System.String)">
            <summary>
            Call this after calling TableNextRow to color the row that is being moved. Not mandatory.
            </summary>
            <param name="uniqueId"></param>
            <returns>Whether row was colored</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RealtimeDragDrop`1.End(System.Int32)">
            <summary>
            Step 4. Call this outside of the table.
            </summary>
            <param name="numRows">How many lines is in your biggest row.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.String,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="searchPredicate">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="preFilter"></param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.String,System.Boolean},System.Func{``0,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="searchPredicate">Secondary filter to apply to the sheet for which items to display.</param>
            <param name="preFilter">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.String},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="toName">The format of each item in the combo box.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.String},System.Func{``0,System.String,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="toName">The format of each item in the combo box.</param>
            <param name="searchPredicate">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.String},System.Func{``0,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="toName">The format of each item in the combo box.</param>
            <param name="preFilter">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ExcelSheetCombo``1(System.String,``0@,System.Func{Lumina.Excel.ExcelSheet{``0},System.String},System.Func{``0,System.String},System.Func{``0,System.String,System.Boolean},System.Func{``0,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="getPreview">The format of the initial value in the combo box.</param>
            <param name="toName">The format of the initial value in the combo box.</param>
            <param name="searchPredicate">Secondary filter to apply to the sheet for which items to display.</param>
            <param name="preFilter">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SearchableCombo``1(System.String,``0@,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="preview">The format of the initial value in the combo box.</param>
            <param name="possibilities">The initial excel sheet.</param>
            <param name="toName">The format of the initial value in the combo box.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SearchableCombo``1(System.String,``0@,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,System.String,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="preview">The format of the initial value in the combo box.</param>
            <param name="possibilities">The initial excel sheet.</param>
            <param name="toName">The format of each item in the combo box.</param>
            <param name="searchPredicate">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SearchableCombo``1(System.String,``0@,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,System.String,System.Boolean},System.Func{``0,System.Boolean},ImGuiNET.ImGuiComboFlags)">
            <summary>
            Creates a searchable combo box for a given Excel sheet with an optional custom filter.
            </summary>
            <typeparam name="T">ExcelSheet</typeparam>
            <param name="id">ID of the combo box.</param>
            <param name="selected">Excel row returned when selected.</param>
            <param name="preview">The format of the initial value in the combo box.</param>
            <param name="possibilities">The initial excel sheet.</param>
            <param name="toName">The format of each item in the combo box.</param>
            <param name="searchPredicate">Secondary filter to apply to the sheet for which items to display.</param>
            <param name="preFilter">Initial filter to apply to the sheet for which items to display.</param>
            <param name="flags">Any ImGuiComboFlags</param>
            <returns>Bool when item is selected.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Nullable{System.Numerics.Vector2})">
            <seealso cref="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Single)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Numerics.Vector2)">
            <seealso cref="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Single)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Single)">
            <summary>
                Scale a float value based on the two independent Dalamud UI scaling factors.
            </summary>
            <param name="f">The float value to scale.</param>
            <returns>The float value scaled with the user's style settings.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Nullable{System.Single})">
            <seealso cref="M:ECommons.ImGuiMethods.ImGuiEx.Scale(System.Single)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.Action[],System.Int32,System.Int32)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.String,System.Action[],System.Action@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.String,System.Action[],System.Int32,System.Int32)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.String,System.Action[],System.Action@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.Action[],System.Action@,System.Int32,System.Int32)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.String,System.Action[],System.Action@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Pagination(System.String,System.Action[],System.Action@,System.Int32,System.Int32)">
            <summary>
            Splits array of draw actions into few pages.
            </summary>
            <param name="id">Unique ID of your paginator. Must be unique on plugin level.</param>
            <param name="actions">Array of actions to paginate</param>
            <param name="paginator">Page switcher that you have to draw. May be absent if there's no page.</param>
            <param name="perPage">How much elements to display per page. If set to 0, it will be automatically calculated as actions.Length / maxPages. If set to 0, maxPages must be more than 0.</param>
            <param name="maxPages">Maximum amount of pages that are allowed to be displayed. If this amount is reached, new perPage amount will be actions.Length / maxPages.</param>
            <returns>Array of actions in the selected by user page for you to draw.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TreeNodeCollapsingHeader(System.String,System.Boolean,System.Action,ImGuiNET.ImGuiTreeNodeFlags)">
            <summary>
            Another interpretation of <see cref="M:ImGuiNET.ImGui.CollapsingHeader(System.String)"/> but with narrow design and border.
            </summary>
            <param name="name"></param>
            <param name="usePadding"></param>
            <param name="action"></param>
            <param name="extraFlags"></param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.PluginAvailabilityIndicator(System.Collections.Generic.IEnumerable{ECommons.ImGuiMethods.ImGuiEx.RequiredPluginInfo},System.String,System.Boolean)">
            <summary>
            Draws plugin availability checkmark. Allows to check by name and version. When hovered, will display tooltip with info about which plugins are installed, outdated or missing.
            </summary>
            <param name="pluginInfos">RequiredPluginInfos of plugins that are required</param>
            <param name="prependText">Override first tooltip line if you want</param>
            <param name="all">Whether to check for all plugins from the list or just one of them</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.Nullable{System.Numerics.Vector4},System.String,System.Boolean)">
            <summary>Selectable item made from TreeNode with bullet mark in front</summary>
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.Nullable{System.Numerics.Vector4},System.String,System.Boolean@,ImGuiNET.ImGuiTreeNodeFlags,System.Boolean)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.String,System.Boolean)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.Nullable{System.Numerics.Vector4},System.String,System.Boolean)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.String,System.Boolean@,System.Boolean)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.Nullable{System.Numerics.Vector4},System.String,System.Boolean)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SelectableNode(System.Nullable{System.Numerics.Vector4},System.String,System.Boolean@,ImGuiNET.ImGuiTreeNodeFlags,System.Boolean)">
            <summary>
            Selectable item made from TreeNode
            </summary>
            <param name="color">Text color</param>
            <param name="id">ImGui ID</param>
            <param name="selected">Selected state storage field</param>
            <param name="extraFlags">Extra tree node flags</param>
            <param name="enabled">Whether node is enabled</param>
            <returns><see langword="true"/> when clicked</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TreeNode(System.String,ImGuiNET.ImGuiTreeNodeFlags)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.TreeNode(System.Nullable{System.Numerics.Vector4},System.String,ImGuiNET.ImGuiTreeNodeFlags)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TreeNode(System.Nullable{System.Numerics.Vector4},System.String,ImGuiNET.ImGuiTreeNodeFlags)">
            <summary>
            Just like <see cref="M:ImGuiNET.ImGui.TreeNode(System.String)"/> but with color option and that spans full width by default.
            </summary>
            <param name="color"></param>
            <param name="name"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="F:ECommons.ImGuiMethods.ImGuiEx.JobSelectorOption.IncludeBase">
            <summary>
            With this option, base jobs will be included as well.
            </summary>
        </member>
        <member name="F:ECommons.ImGuiMethods.ImGuiEx.JobSelectorOption.ClearFilterOnOpen">
            <summary>
            Whether to clear filter when user opens job selection menu.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.JobSelector(System.String,System.Collections.Generic.ICollection{ECommons.ExcelServices.Job},ECommons.ImGuiMethods.ImGuiEx.JobSelectorOption[],System.Int32,System.String,System.Func{ECommons.ExcelServices.Job,System.Boolean})">
            <summary>
            ImGui combo that opens up into a multiple job selector with icons and search field.
            </summary>
            <param name="id">Standard ID that will be passed directly to the combo.</param>
            <param name="selectedJobs">A collection where selected jobs will be written.</param>
            <param name="options">An array of extra options, if desired.</param>
            <param name="maxPreviewJobs">How much jobs maximum will be visible on a preview before it will just display amount.</param>
            <param name="noJobSelectedPreview">Preview value that should be displayed when no job is selected.</param>
            <param name="jobDisplayFilter">Optional extra filter for jobs to be displayed.</param>
            <returns><see langword="true"/> every time <paramref name="selectedJobs"/> is modified.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.HelpMarker(System.String,System.Nullable{System.Numerics.Vector4},System.String,System.Boolean)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.InfoMarker(System.String,System.Nullable{System.Numerics.Vector4},System.String,System.Boolean)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.InfoMarker(System.String,System.Nullable{System.Numerics.Vector4},System.String,System.Boolean)">
            <summary>
            <see cref="M:Dalamud.Interface.Components.ImGuiComponents.HelpMarker(System.String)"/> but with more options
            </summary>
            <param name="helpText"></param>
            <param name="color"></param>
            <param name="symbolOverride"></param>
            <param name="sameLine">Whether to call SameLine before drawing marker</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ActivateIfDoubleClicked">
            <summary>
            Activates item when double-clicked. Place after any ImGui Slider component to enable edit on double-click.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.HoveredAndClicked(System.String,ImGuiNET.ImGuiMouseButton,System.Boolean)">
            <summary>
            Checks whether item is hovered and clicked. Sets cursor to hand to indicate that it can be clicked.
            </summary>
            <param name="tooltip">Optional tooltip</param>
            <param name="btn">Which button to check</param>
            <param name="requireCtrl">Whether to require CTRL when clicking</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Vector4FromRGB(System.UInt32,System.Single)">
            <summary>
            Converts RGB color to <see cref="T:System.Numerics.Vector4"/> for ImGui
            </summary>
            <param name="col">Color in format 0xRRGGBB</param>
            <param name="alpha">Optional transparency value between 0 and 1</param>
            <returns>Color in <see cref="T:System.Numerics.Vector4"/> format ready to be used with <see cref="T:ImGuiNET.ImGui"/> functions</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Vector4FromRGBA(System.UInt32)">
            <summary>
            Converts RGBA color to <see cref="T:System.Numerics.Vector4"/> for ImGui
            </summary>
            <param name="col">Color in format 0xRRGGBBAA</param>
            <returns>Color in <see cref="T:System.Numerics.Vector4"/> format ready to be used with <see cref="T:ImGuiNET.ImGui"/> functions</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.EzTableColumns(System.String,System.Action[],System.Nullable{System.Int32},ImGuiNET.ImGuiTableFlags)">
            <summary>
            Draws equally sized columns without ability to resize
            </summary>
            <param name="id">Unique ImGui ID</param>
            <param name="values">List of actions for each column</param>
            <param name="columns">Force number of columns</param>
            <param name="extraFlags">Add extra flags to the table</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.PushCursor(System.Numerics.Vector2)">
            <summary>
            Move the cursor by the vector relative to the current position
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.PushCursor(System.Single,System.Single)">
            <summary>
            Move the cursor by the coordinates relative to the current position
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.PushCursorX(System.Single)">
            <summary>
            Move the cursor horizontally x units relative to the current position
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.PushCursorY(System.Single)">
            <summary>
            Move the cursor vertically y units relative to the current position
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.InputInt(System.Single,System.String,System.Nullable{System.Int32}@,System.Int32,System.Int32,ImGuiNET.ImGuiInputTextFlags)">
            <summary>
            An <see cref="M:ImGuiNET.ImGui.InputInt(System.String,System.Int32@)"/> for nullable int. Consists of checkbox and input component that is enabled/disabled based on checkbox state.
            </summary>
            <param name="width"></param>
            <param name="label"></param>
            <param name="valueNullable"></param>
            <param name="step"></param>
            <param name="step_fast"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderInt(System.String,System.Int32@,System.Int32,System.Int32,System.String,ImGuiNET.ImGuiSliderFlags)">
            <summary>
            <see cref="M:ImGuiNET.ImGui.SliderInt(System.String,System.Int32@,System.Int32,System.Int32)"/> but with double-click to edit support.
            </summary>
            <param name="label"></param>
            <param name="v"></param>
            <param name="v_min"></param>
            <param name="v_max"></param>
            <param name="format"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderInt(System.String,System.Int32@,System.Int32,System.Int32,System.String)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SliderInt(System.String,System.Int32@,System.Int32,System.Int32,System.String,ImGuiNET.ImGuiSliderFlags)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderInt(System.String,System.Int32@,System.Int32,System.Int32)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SliderInt(System.String,System.Int32@,System.Int32,System.Int32,System.String,ImGuiNET.ImGuiSliderFlags)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderFloat(System.String,System.Single@,System.Single,System.Single,System.String,ImGuiNET.ImGuiSliderFlags)">
            <summary>
            <see cref="M:ImGuiNET.ImGui.SliderFloat(System.String,System.Single@,System.Single,System.Single)"/> but with double-click to edit support.
            </summary>
            <param name="label"></param>
            <param name="v"></param>
            <param name="v_min"></param>
            <param name="v_max"></param>
            <param name="format"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderFloat(System.String,System.Single@,System.Single,System.Single,System.String)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SliderFloat(System.String,System.Single@,System.Single,System.Single,System.String,ImGuiNET.ImGuiSliderFlags)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderFloat(System.String,System.Single@,System.Single,System.Single)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.SliderFloat(System.String,System.Single@,System.Single,System.Single,System.String,ImGuiNET.ImGuiSliderFlags)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderIntAsFloat(System.String,System.Int32@,System.Int32,System.Int32,System.Single)">
            <summary>
            Displays ImGui.SliderFloat for internal int value.
            </summary>
            <param name="id">ImGui ID</param>
            <param name="value">Integer value</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximum value</param>
            <param name="divider">Value is divided by divider before being presented to user</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.EnumCombo``1(System.String,``0@,System.Collections.Generic.IDictionary{``0,System.String})">
            <summary>
            Draws an easy combo selector for an enum with a search field for long lists.
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="name">ImGui ID</param>
            <param name="refConfigField">Value</param>
            <param name="names">Optional Name overrides</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.EnumCombo``1(System.String,``0@,System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{``0,System.String})">
            <summary>
            Draws an easy combo selector for an enum with a search field for long lists.
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="name">ImGui ID</param>
            <param name="refConfigField">Value</param>
            <param name="filter">Optional filter</param>
            <param name="names">Optional Name overrides</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RadioButtonBool(System.String,System.String,System.Boolean@,System.Boolean,System.Action,System.Action)">
            <summary>
            Draws two radio buttons for a boolean value.
            </summary>
            <param name="labelTrue">True choice radio button text</param>
            <param name="labelFalse">False choice radio button text</param>
            <param name="value">Value</param>
            <param name="sameLine">Whether to draw radio buttons on the same line</param>
            <param name="prefix">Will be invoked before each radio button draw</param>
            <param name="suffix">Will be invoked after each radio button draw</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextV(System.Nullable{System.Numerics.Vector4},System.String)">
            <summary>
            Aligns text vertically to a standard size button.
            </summary>
            <param name="col">Color</param>
            <param name="s">Text</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextV(System.String)">
            <summary>
            Aligns text vertically to a standard size button.
            </summary>
            <param name="s">Text</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextCopy(System.Numerics.Vector4,System.String)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.TextCopy(System.String)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextCopy(System.String)">
            <summary>
            Displays text that will also be copied to clipboard if clicked.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextWrappedCopy(System.String)">
            <summary>
            Displays wrapped text that will also be copied to clipboard if clicked.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextWrappedCopy(System.Numerics.Vector4,System.String)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ImGuiEx.TextWrappedCopy(System.String)"/>
        </member>
        <member name="M:ECommons.ImGuiMethods.ThreadLoadImageHandler.ClearAll">
            <summary>
            Clears and disposes all cached resources. You can use it to free up memory once you think textures that you have previously loaded won't be needed for a while or to trigger a complete reload.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ThreadLoadImageHandler.TryGetIconTextureWrap(System.Int32,System.Boolean,Dalamud.Interface.Textures.TextureWraps.IDalamudTextureWrap@)">
            <inheritdoc cref="M:ECommons.ImGuiMethods.ThreadLoadImageHandler.TryGetIconTextureWrap(System.UInt32,System.Boolean,Dalamud.Interface.Textures.TextureWraps.IDalamudTextureWrap@)" />
        </member>
        <member name="M:ECommons.ImGuiMethods.ThreadLoadImageHandler.TryGetIconTextureWrap(System.UInt32,System.Boolean,Dalamud.Interface.Textures.TextureWraps.IDalamudTextureWrap@)">
            <summary>
            Attempts to load game icon. <b>Do NOT cache <paramref name="textureWrap"/></b> and call this function every time before you want to work with it.
            </summary>
            <param name="icon"></param>
            <param name="hq"></param>
            <param name="textureWrap"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ThreadLoadImageHandler.TryGetTextureWrap(System.String,Dalamud.Interface.Textures.TextureWraps.IDalamudTextureWrap@)">
            <summary>
            Attempts to load image from URL, game path or file on disk. <b>Do NOT cache <paramref name="textureWrap"/></b> and call this function every time before you want to work with it.
            </summary>
            <param name="url">URL, game path or file on disk</param>
            <param name="textureWrap"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Interop.WindowFunctions.ApplicationIsActivated">
            <summary>Returns true if the current application has focus, false otherwise</summary>
        </member>
        <member name="T:ECommons.MathHelpers.BitHelper">
            <summary>
            Helpers to perform bit operations on numeric types.
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)">
            <summary>
            Checks whether or not a given bit is set.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value.</param>
            <param name="n">The position of the bit to check (in [0, 31] range).</param>
            <returns>Whether or not the n-th bit is set.</returns>
            <remarks>
            This method doesn't validate <paramref name="n"/> against the valid range.
            If the parameter is not valid, the result will just be inconsistent.
            Additionally, no conditional branches are used to retrieve the flag.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Checks whether or not a given bit is set in a given bitwise lookup table.
            This method provides a branchless, register-based (with no memory accesses) way to
            check whether a given value is valid, according to a precomputed lookup table.
            It is similar in behavior to <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)"/>, with the main difference
            being that this method will also validate the input <paramref name="x"/> parameter, and
            will always return <see langword="false"/> if it falls outside of the expected interval.
            Additionally, this method accepts a <paramref name="min"/> parameter, which is used to
            decrement the input parameter <paramref name="x"/> to ensure that the range of accepted
            values fits within the available 32 bits of the lookup table in use.
            For more info on this optimization technique, see <see href="https://egorbo.com/llvm-range-checks.html"/>.
            Here is how the code from the link above would be implemented using this method:
            <code>
            bool IsReservedCharacter(char c)
            {
                return BitHelper.HasLookupFlag(314575237u, c, 36);
            }
            </code>
            The resulted assembly is virtually identical, with the added optimization that the one
            produced by <see cref="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt32,System.Int32,System.Int32)"/> has no conditional branches at all.
            </summary>
            <param name="table">The input lookup table to use.</param>
            <param name="x">The input value to check.</param>
            <param name="min">The minimum accepted value for <paramref name="x"/> (defaults to 0).</param>
            <returns>Whether or not the corresponding flag for <paramref name="x"/> is set in <paramref name="table"/>.</returns>
            <remarks>
            For best results, as shown in the sample code, both <paramref name="table"/> and <paramref name="min"/>
            should be compile-time constants, so that the JIT compiler will be able to produce more efficient code.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasZeroByte(System.UInt32)">
            <summary>
            Checks whether the given value has any bytes that are set to 0.
            That is, given a <see cref="T:System.UInt32"/> value, which has a total of 4 bytes,
            it checks whether any of those have all the bits set to 0.
            </summary>
            <param name="value">The input value to check.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to 0.</returns>
            <remarks>
            This method contains no branches.
            For more background on this subject, see <see href="https://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord"/>.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasZeroByte(System.UInt64)">
            <summary>
            Checks whether the given value has any bytes that are set to 0.
            This method mirrors <see cref="M:ECommons.MathHelpers.BitHelper.HasZeroByte(System.UInt32)"/>, but with <see cref="T:System.UInt64"/> values.
            </summary>
            <param name="value">The input value to check.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to 0.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasByteEqualTo(System.UInt32,System.Byte)">
            <summary>
            Checks whether a byte in the input <see cref="T:System.UInt32"/> value matches a target value.
            </summary>
            <param name="value">The input value to check.</param>
            <param name="target">The target byte to look for.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to <paramref name="target"/>.</returns>
            <remarks>
            This method contains no branches.
            For more info, see <see href="https://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord"/>.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasByteEqualTo(System.UInt64,System.Byte)">
            <summary>
            Checks whether a byte in the input <see cref="T:System.UInt32"/> value matches a target value.
            This method mirrors <see cref="M:ECommons.MathHelpers.BitHelper.HasByteEqualTo(System.UInt32,System.Byte)"/>, but with <see cref="T:System.UInt64"/> values.
            </summary>
            <param name="value">The input value to check.</param>
            <param name="target">The target byte to look for.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to <paramref name="target"/>.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt32@,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt32"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 31] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 31] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <returns>An <see cref="T:System.UInt32"/> value equal to <paramref name="value"/> except for the <paramref name="n"/>-th bit.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt32,System.Byte,System.Byte)">
            <summary>
            Extracts a bit field range from a given value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 31] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <returns>The value of the extracted range within <paramref name="value"/>.</returns>
            <remarks>
            This method doesn't validate <paramref name="start"/> and <paramref name="length"/>.
            If either parameter is not valid, the result will just be inconsistent. The method
            should not be used to set all the bits at once, and it is not guaranteed to work in
            that case, which would just be equivalent to assigning the <see cref="T:System.UInt32"/> value.
            Additionally, no conditional branches are used to retrieve the range.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt32@,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt32"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 31] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt32,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt32,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The initial <see cref="T:System.UInt32"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 31] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <returns>The updated bit field value after setting the specified range.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt32,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt64,System.Int32)">
            <summary>
            Checks whether or not a given bit is set.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value.</param>
            <param name="n">The position of the bit to check (in [0, 63] range).</param>
            <returns>Whether or not the n-th bit is set.</returns>
            <remarks>
            This method doesn't validate <paramref name="n"/> against the valid range.
            If the parameter is not valid, the result will just be inconsistent.
            Additionally, no conditional branches are used to retrieve the flag.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Checks whether or not a given bit is set in a given bitwise lookup table.
            For more info, check the XML docs of the <see cref="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt32,System.Int32,System.Int32)"/> overload.
            </summary>
            <param name="table">The input lookup table to use.</param>
            <param name="x">The input value to check.</param>
            <param name="min">The minimum accepted value for <paramref name="x"/> (defaults to 0).</param>
            <returns>Whether or not the corresponding flag for <paramref name="x"/> is set in <paramref name="table"/>.</returns>
            <remarks>
            For best results, as shown in the sample code, both <paramref name="table"/> and <paramref name="min"/>
            should be compile-time constants, so that the JIT compiler will be able to produce more efficient code.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt64@,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt64"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 63] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt64,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 63] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <returns>An <see cref="T:System.UInt64"/> value equal to <paramref name="value"/> except for the <paramref name="n"/>-th bit.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt64,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt64,System.Byte,System.Byte)">
            <summary>
            Extracts a bit field range from a given value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 63] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <returns>The value of the extracted range within <paramref name="value"/>.</returns>
            <remarks>
            This method doesn't validate <paramref name="start"/> and <paramref name="length"/>.
            If either parameter is not valid, the result will just be inconsistent. The method
            should not be used to set all the bits at once, and it is not guaranteed to work in
            that case, which would just be equivalent to assigning the <see cref="T:System.UInt64"/> value.
            Additionally, no conditional branches are used to retrieve the range.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt64@,System.Byte,System.Byte,System.UInt64)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt64"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 63] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt64,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt64,System.Byte,System.Byte,System.UInt64)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The initial <see cref="T:System.UInt64"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 63] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <returns>The updated bit field value after setting the specified range.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt64,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.CalculateCircularMovement(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Collections.Generic.List{System.Collections.Generic.List{System.Numerics.Vector3}}@,System.Single,System.Int32,System.Nullable{System.ValueTuple{System.Single,System.Single}})">
            <inheritdoc cref="M:ECommons.MathHelpers.MathHelper.CalculateCircularMovement(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Collections.Generic.List{System.Collections.Generic.List{System.Numerics.Vector2}}@,System.Single,System.Int32,System.Nullable{System.ValueTuple{System.Single,System.Single}})"/>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.FindClosestPointOnLine(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Calculates perpendicular distance drawn from <paramref name="point"/> towards infinite line defined by (<paramref name="lineA"/>, <paramref name="lineB"/>)
            </summary>
            <param name="point"></param>
            <param name="lineA"></param>
            <param name="lineB"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.IsPointPerpendicularToLineSegment(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Tests whether perpendicular drawn from <paramref name="point"/> towards line will intersect line segment (<paramref name="lineA"/>, <paramref name="lineB"/>)
            </summary>
            <param name="point"></param>
            <param name="lineA"></param>
            <param name="lineB"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.CalculateCircularMovement(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Collections.Generic.List{System.Collections.Generic.List{System.Numerics.Vector2}}@,System.Single,System.Int32,System.Nullable{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Calculates circular path around specified point required to arrive towards a specified point.
            </summary>
            <param name="centerPoint">Center point around which movement will be calculated</param>
            <param name="initialPoint">Starting point</param>
            <param name="exitPoint">Point towards which you aim to move after completing circulat move. Must be greater than the radius from <paramref name="centerPoint"/> to <paramref name="initialPoint"/>.</param>
            <param name="candidates">List of all pathes that were tested, for debugging.</param>
            <param name="precision">How much points on circle to generate</param>
            <param name="exitPointTolerance">How much points that are closest to exit point to consider to be valid stopping points</param>
            <param name="clampRadius">If set, radius of circular path will be restricted to these values inclusively.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.GetAngleBetweenLines(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Gets angle between two lines.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns>Radians</returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.Square(System.Single)">
            <summary>
            Returns squared value of a number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.MovePoint(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Given points A and B and a distance, returns a second point that origins from A, directs towards B and has a specified distance.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.GetAngleBetweenPoints(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Calculates angle between two points.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Radians</returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.GetPointFromAngleAndDistance(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Gets a second point given initial point, angle and distance.
            </summary>
            <param name="initialPoint"></param>
            <param name="angle">Radians</param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.Mod(System.Double,System.Double)">
            <summary>Calculates the positive remainder when dividing a dividend by a divisor.</summary>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.Mod(System.Single,System.Single)">
            <summary>Calculates the positive remainder when dividing a dividend by a divisor.</summary>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.Mod(System.Int32,System.Int32)">
            <summary>Calculates the positive remainder when dividing a dividend by a divisor.</summary>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.RotateWorldPoint(System.Numerics.Vector3,System.Single,System.Numerics.Vector3)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="angle">Radians</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.GetRelativeAngle(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Degrees
            </summary>
            <param name="origin"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.GetRelativeAngle(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Degrees
            </summary>
            <param name="origin"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.MathHelpers.MathHelper.GetCardinalDirection(System.Single)">
            <summary>
            From angle in degrees
            </summary>
            <param name="angle">Degrees</param>
            <returns></returns>
        </member>
        <member name="T:ECommons.MathHelpers.Number">
            <summary>
            Ultimate number union. Offers same performance as using numbers directly.
            </summary>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.RegisterOnInstalledPluginsChangedEvents(System.Action[])">
            <summary>
            Registers actions that will be triggered upon any installed plugin state change. Plugin monitoring will begin upon registering any actions.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.GetPluginMaster(System.String)">
            <summary>
            Loads a remote Plugin Master.
            </summary>
            <param name="masterURL">The URL to the remote Master.</param>
            <returns>
            A List of <see cref="T:Dalamud.Plugin.Internal.Types.Manifest.RemotePluginManifest"/>s for each plugin in the Master.<br/>
            List will be null if the operation fails.
            </returns>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.TryGetDalamudPlugin(System.String,Dalamud.Plugin.IDalamudPlugin@,System.Runtime.Loader.AssemblyLoadContext@,System.Boolean,System.Boolean)">
            <summary>
            Attempts to retrieve an instance of loaded plugin and it's load context. 
            </summary>
            <param name="internalName">Target plugin's internal name</param>
            <param name="instance">Plugin instance</param>
            <param name="context">Plugin's load context. May be null.</param>
            <param name="suppressErrors">Whether to stay silent on failures</param>
            <param name="ignoreCache">Whether to disable caching of the plugin and it's context to speed up further searches</param>
            <returns>Whether operation succeeded</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.HasRepo(System.String)">
            <summary>
            Checks the Dalamud Configuration for the presence of a given repository URL.
            </summary>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.AddRepo(System.String,System.Boolean)">
            <summary>
            Attempts to add a new repository entry into the Dalamud Configuration. If the repo already exists, nothing is overridden.
            </summary>
            <param name="repoURL">The json URL of the repository.</param>
            <param name="enabled">Set the enabled state, whether plugins from the repo will load in the plugin installer.</param>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.AddPlugin(System.String,System.String)">
            <summary>
            Installs a plugin from a remote Plugin Master.
            </summary>
            <param name="masterURL">the remote Master for <see cref="M:ECommons.Reflection.DalamudReflector.GetPluginMaster(System.String)"/>.</param>
            <param name="pluginInternalName">the internal name of the plugin you want to install.</param>
            <returns>whether the install succeeded.</returns>
            <remarks>
            Will provide Error logs for any type of failure.<br/>
            Will add the remote Master as a Repo if it isn't already one.<br/>
            Installs via <see cref="M:Dalamud.Plugin.Internal.PluginManager.InstallPluginAsync(Dalamud.Plugin.Internal.Types.Manifest.RemotePluginManifest,System.Boolean,Dalamud.Plugin.PluginLoadReason,System.Nullable{System.Guid})"/>.
            </remarks>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.RemoveCurrentPlugin">
            <summary>
            Unloads then Deletes the current plugin on the next Tick.<br/>
            The plugin that called this. Your plugin.
            </summary>
            <remarks>
            Uses the internal
            <see cref="M:Dalamud.Plugin.Internal.Types.LocalPlugin.UnloadAsync(Dalamud.Plugin.Internal.Types.PluginLoaderDisposalMode)"/><br/>
            and <see cref="M:Dalamud.Plugin.Internal.PluginManager.RemovePlugin(Dalamud.Plugin.Internal.Types.LocalPlugin)"/>
            </remarks>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.ReloadPluginMasters">
            <summary>
            Reloads the Dalamud Plugin Manager, effectively the same as closing and reopening the Plugin Installer window.
            </summary>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.SaveDalamudConfig">
            <summary>
            Saves the Dalamud Configuration.
            </summary>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.DeleteSharedData(System.String)">
            <summary>
            Deletes specified shared data
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ECommons.Reflection.FieldPropertyUnion.IFieldPropertyUnion">
            <summary>
            Interface that represents union of FieldInfo and PropertyInfo. Allows access to common methods and properties.
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call(System.Object,System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Calls a generic or non-generic method of an instance.
            </summary>
            <param name="instance">Instance containing method</param>
            <param name="methodName">Name of a method to call.</param>
            <param name="methodTypeArguments">Generic argument names. Pass empty array or null if a function is non-generic. Generic types only will be searched within <paramref name="instance"/> assembly.</param>
            <param name="parameters">Parameters to call method with.</param>
            <returns>Object returned by a method.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Calls a generic or non-generic method of an instance.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="assemblies">Assemblies to search types in. Only required if <paramref name="methodTypeArguments"/> is used.</param>
            <param name="methodName">Name of a method to call.</param>
            <param name="methodTypeArguments">Generic argument names. Pass empty array or null if a function is non-generic, otherwise also populate <paramref name="assemblies"/> parameter.</param>
            <param name="parameters">Parameters to call method with.</param>
            <returns>Object returned by a method.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call``1(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Calls a generic or non-generic method of an instance.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="assemblies">Assemblies to search types in. Only required if <paramref name="methodTypeArguments"/> is used.</param>
            <param name="methodName">Name of a method to call.</param>
            <param name="methodTypeArguments">Generic argument names. Pass empty array or null if a function is non-generic, otherwise also populate <paramref name="assemblies"/> parameter.</param>
            <param name="parameters">Parameters to call method with.</param>
            <returns>Object returned by a method.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CallStatic(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Calls a static non-generic method.
            </summary>
            <param name="obj">Object on which assembly to search.</param>
            <param name="type">Fully qualified static class name</param>
            <param name="name">Method's name</param>
            <param name="values">Method's parameters</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CallStatic``1(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Calls a static non-generic method.
            </summary>
            <param name="obj">Object on which assembly to search.</param>
            <param name="type">Fully qualified static class name</param>
            <param name="name">Method's name</param>
            <param name="values">Method's parameters</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CallStatic(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Ultimate static method calling method.
            </summary>
            <param name="assemblies">Assemblies to search method in.</param>
            <param name="typeName">Fully qualified type name.</param>
            <param name="typeArguments">Type arguments if generic, null otherwise</param>
            <param name="methodName">Static method name.</param>
            <param name="methodTypeArguments">Static method type arguments if generic, null otherwise.</param>
            <param name="parameters">Method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetFoP(System.Object,System.String)">
            <summary>
            Gets field or property of an instance object.
            </summary>
            <param name="obj">Instance containing field/property.</param>
            <param name="name">Name of the field/property</param>
            <returns>Value of a field/property</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetFoP``1(System.Object,System.String)">
            <summary>
            Gets field or property of an instance object.
            </summary>
            <param name="obj">Instance containing field/property.</param>
            <param name="name">Name of the field/property</param>
            <returns>Value of a field/property</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.SetFoP(System.Object,System.String,System.Object)">
            <summary>
            Sets a field or property of an instance object.
            </summary>
            <param name="obj">Instance containing field/property.</param>
            <param name="name">Name of the field/property</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetStaticFoP(System.Object,System.String,System.String)">
            <summary>
            Subject for future refactoring and changes!
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetStaticFoP``1(System.Object,System.String,System.String)">
            <summary>
            Subject for future refactoring and changes!
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.SetStaticFoP(System.Object,System.String,System.String,System.Object)">
            <summary>
            Subject for future refactoring and changes!
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Attempts to call a non-generic instance method.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="name">Method's name</param>
            <param name="params">Method's parameters</param>
            <param name="matchExactArgumentTypes">Whether to search for exact method types. Set this to true if you're dealing with ambiguous overloads.</param>
            <returns>Object returned by the target method</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call``1(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Attempts to call a non-generic instance method.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="name">Method's name</param>
            <param name="params">Method's parameters</param>
            <param name="matchExactArgumentTypes">Whether to search for exact method types. Set this to true if you're dealing with ambiguous overloads.</param>
            <returns>Object returned by the target method</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.FindStaticMethodInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Type[],System.String,System.Type[],System.Type[])">
            <summary>
            Searches for a static method in the array of assemblies.
            </summary>
            <param name="assemblies">Assemblies to search in</param>
            <param name="typeName">Fully qualified class name</param>
            <param name="typeArguments">Type arguments, if necessary. Leave as null if type is non-generic.</param>
            <param name="methodName">Static method name</param>
            <param name="methodTypeArguments">Method type arguments, if necessary. Leave as null if method is non-generic.</param>
            <param name="parameterTypes">Method parameters types.</param>
            <returns>MethodInfo of a method that was found or null.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.FindTypesInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches for specified non-generic types in specified assembly list.
            </summary>
            <param name="assemblies">Assemblies to search in</param>
            <param name="typeNames">A list of requested types names</param>
            <returns>A list of requested types. Please check resulting list length to ensure all types were found.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.FindTypesInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Type[]}})">
            <summary>
            Searches for specified generic and non-generic types in specified assembly list.
            </summary>
            <param name="assemblies">Assemblies to search in</param>
            <param name="typeNames">A list of tuples of requested types names and generic argument types. Array of types can be left empty or null to specify that this type is non-generic.</param>
            <returns>A list of requested types. Please check resulting list length to ensure all types were found.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetTypes(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts array of objects into array of these objects' types.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CreateDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates delegate to a method by MethodInfo
            </summary>
            <param name="methodInfo">MethodInfo of a method for which a delegate will be created.</param>
            <param name="target">Instance object that is hosting the method. Pass null if a method is static.</param>
            <returns></returns>
        </member>
        <member name="T:ECommons.Schedulers.ThreadPool">
            <summary>
            A helper to let you have your own simple thread pool.
            </summary>
        </member>
        <member name="M:ECommons.Schedulers.ThreadPool.Run(System.Action,System.Action{System.Exception})">
            <summary>
            Enqueues an action to be ran in one of threads. If amount of currently running threads will be less than MaxThreads, new thread will be created, otherwise action will be picked by first free thread.
            </summary>
            <param name="task">An action to run.</param>
            <param name="onCompletion">If specified, will be executed after completion of main action. If specified, no errors will be printed in log, instead if any occurs it will be passed into an action as an argument.</param>
        </member>
        <member name="M:ECommons.SimpleGui.EzConfigGui.GetWindow``1">
            <summary>
            Returns a window from the EzGui WindowSystem.
            </summary>
        </member>
        <member name="M:ECommons.SimpleGui.EzConfigGui.RemoveWindow``1">
            <summary>
            Removes a window from the EzGui WindowSystem. Windows are auto-disposed upon plugin unload. This is only needed if you need to manually remove a window prior to plugin unload.
            </summary>
        </member>
        <member name="T:ECommons.SimpleGui.PopupWindow">
            <summary>
            Allows creation of single-use popup windows. Disposes itself upon being closed.
            </summary>
        </member>
        <member name="T:ECommons.Singletons.PriorityAttribute">
            <summary>
            Sets service creation priority. Default is 0; the less is priority, the later will service be loaded, and earlier - disposed.
            </summary>
        </member>
        <member name="T:ECommons.Singletons.SingletonServiceManager">
            <summary>
            Simple singleton service manager. Create a static class and fill it up with fields/properties of your singleton services, then call <see cref="M:ECommons.Singletons.SingletonServiceManager.Initialize(System.Type)"/> with your static class type whenever you want. Any uninitialized instances will be initialized upon <see cref="M:ECommons.Singletons.SingletonServiceManager.Initialize(System.Type)"/> call, and anything that implements <see cref="T:System.IDisposable"/> will be disposed together with <see cref="M:ECommons.ECommonsMain.Dispose"/> call.
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.refX">
            <summary>
            When type is fixed coordinate element: specifies coordinate of that element, otherwise has no effect
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.refY">
            <summary>
            When type is fixed coordinate element: specifies coordinate of that element, otherwise has no effect
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.refZ">
            <summary>
            When type is fixed coordinate element: specifies coordinate of that element, otherwise has no effect
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.offX">
            <summary>
            Specifies offset from targeted object or fixed coordinate
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.offY">
            <summary>
            Specifies offset from targeted object or fixed coordinate
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.offZ">
            <summary>
            Specifies offset from targeted object or fixed coordinate
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.ElementType">
            <summary>
            0: Object at fixed coordinates |
            1: Object relative to actor position | 
            2: Line between two fixed coordinates | 
            3: Line relative to object pos | 
            4: Cone relative to object position |
            5: Cone at fixed coordinates
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.RefActorComparisonType">
            <summary>
            0: Name |
            1: Model ID |
            2: Object ID |
            3: Data ID | 
            4: NPC ID |
            5: Placeholder |
            6: Name ID | 
            7: VFX Path
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.RefActorType">
            0: Game object with specific name |
            1: Self |
            2: Targeted enemy
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.SetOnConnect(System.Action)">
            <summary>
            Executed when connected or reconnected to Splatoon. Create and recreate your elements here. Once this event is fired, all already created elements become invalid.
            </summary>
            <param name="action">Action to be executed on connect</param>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.IsConnected">
            <returns>Whether currently connected to Splatoon</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Int64[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Int64)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Int64)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Single[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Single)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Single)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Single[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyConditionF">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Int64[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.DisplayOnce(ECommons.SplatoonAPI.Element)">
            <summary>
            Display certain element in next frame only. 
            </summary>
            <param name="e">Element to display</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.RemoveDynamicElements(System.String)">
            <summary>
            Removes dynamic elements with specific name. If more than one element was registered under certain name, all of these elements will be removed.
            </summary>
            <param name="name">Name of element(s)</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.DecodeElement(System.String)">
            <summary>
            Attempts to decode element that was encoded into JSON.
            </summary>
            <param name="input">Input string, you can export it from Splatoon. Make sure element is enabled!</param>
            <returns>Element that is ready for use or null if failed</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.DecodeLayout(System.String)">
            <summary>
            Work in progress on this function
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster">
            <summary>
            A class that contains useful methods for addons.<br></br><br></br>
            If you want to add an addon:<br></br>
            - Inherit AddonMasterBase<br></br>
            - Make sure that class is named exactly as addon;<br></br>
            - Make sure that class is a nested class inside partial AddonMaster class;<br></br>
            - Make sure to implement both nint and void* constructors<br></br>
            <b>- Prefer NOT to use indexes; instead, create an array of entries and create internal method to click an item. See RetainerList and SelectString for examples.</b><br />
            <b>Ideally, automatic method should run as much checks as possible to disallow selecting disabled entries, entering values outside of range into checkboxes, etc. If something allows doing that, do not rely on it as ultimately the goal is to only allow 100% valid inputs.</b>
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.Bank">
            <summary>
            Gil transfer addon (seen in retainers)
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BankaCraftworksSupply">
            <summary>
            Crystarium/Studium/Wachumeqimeqi Deliveries addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerEditor">
            <summary>
            Portraits editor addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerList">
            <summary>
            Portraits list addon
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerList.Portraits.ListIndex">
            <summary>
            1-based index
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerList.Portraits.PortraitBroken">
            <summary>
            1 = broken <br></br>
            0 = not broken
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerList.Portraits.Unk06">
            <summary>
            7 = unable to retrieve glamour plate data <br></br>
            5 = broken portrait <br></br>
            1 = unbroken portrait and UseAsInstantPortrait is off <br></br>
            0 = unbroken portrait and UseAsInstantPortrait is on
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerList.Portraits.UseAsInstantPortrait">
            <summary>
            0 = on <br></br>
            1 = off
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.BannerMIP">
            <summary>
            Portrait MVP voting addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.ColorantColoring">
            <summary>
            Item dyeing addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.Dialogue">
            <summary>
            Title screen error code addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.DifficultySelectYesNo">
            <summary>
            Solo duty difficulty selection addon
            </summary>
        </member>
        <member name="M:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.Gathering.ExtractNumber">
            <remarks>
            Pattern:<br/>
            <code>\\d+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.ManeuversArmorBoarding">
            <summary>
            Rival Wings mount choice addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.ManeuversRecord">
            <summary>
            Rival Wings post-game addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.MJIRecipeNoteBook">
            <summary>
            Island Sanctuary crafting log addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.MoogleCollection">
            <summary>
            Mogpendium addon
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.PvpReward">
            <summary>
            PvP Series rewards addon
            </summary>
        </member>
        <member name="M:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.RelicNoteBook.ExtractNumber">
            <remarks>
            Pattern:<br/>
            <code>\\d+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.SelectYesno.No">
            <summary>
            This is always the second button. In a two button SelectYesno, this is no. In a three button SelectYesno, it can be something else (such as "Wait")
            </summary>
        </member>
        <member name="T:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.ShopExchangeCurrencyDialog">
            <summary>
            Custom input numeric-esque addon for venture exchanges
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TreasureHighLow.TryLuckButton">
            <remarks>
            Only visible when it's your chest
            </remarks>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TreasureHighLow.OpenChestButton">
            <remarks>
            Only visible when it's your chest
            </remarks>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TreasureHighLow.CloseButton">
            <remarks>
            Only visible when it's not your chest
            </remarks>
        </member>
        <member name="M:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TreasureHighLow.TryLuck">
            <remarks>
            Only callable when it's your chest
            </remarks>
        </member>
        <member name="M:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TreasureHighLow.OpenChest">
            <remarks>
            Only callable when it's your chest
            </remarks>
        </member>
        <member name="M:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TreasureHighLow.Close">
            <remarks>
            Only callable when it's not your chest
            </remarks>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMaster.TripleTriadResult.WonValue">
            <summary>
            0 = won, 1 = lost
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AddonMasterImplementations.AddonMasterBase`1.AddonDescription">
            <summary>
            User-friendly description, for use in plugin settings, etc.
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AtkReaderImplementations.ReaderBannerList.Portrait.ListIndex">
            <summary>
            1-based index
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AtkReaderImplementations.ReaderBannerList.Portrait.PortraitBroken">
            <summary>
            1 = broken <br></br>
            0 = not broken
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AtkReaderImplementations.ReaderBannerList.Portrait.Unk06">
            <summary>
            7 = unable to retrieve glamour plate data <br></br>
            5 = broken portrait <br></br>
            1 = unbroken portrait and UseAsInstantPortrait is off <br></br>
            0 = unbroken portrait and UseAsInstantPortrait is on
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AtkReaderImplementations.ReaderBannerList.Portrait.UseAsInstantPortrait">
            <summary>
            0 = on <br></br>
            1 = off
            </summary>
        </member>
        <member name="P:ECommons.UIHelpers.AtkReaderImplementations.ReaderMiragePrismPrismSetConvert.ItemCount">
            <remarks>
            Also the amount of glamour prisms required
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtractNumber_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ExtractNumber method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ExtractNumber_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractNumber_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtractNumber_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractNumber_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtractNumber_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractNumber_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractNumber_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtractNumber_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyDigit(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a Unicode digit.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptDigits">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
    </members>
</doc>
