<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penumbra.Api</name>
    </assembly>
    <members>
        <member name="T:Penumbra.Api.ChangedItemHover">
            Delegates used by different events.
            <summary>Used when hovering over a changed item.</summary>
            <returns>The hovered <paramref name="item"/> if it is of a known type, null otherwise.</returns>
        </member>
        <member name="T:Penumbra.Api.ChangedItemClick">
            <summary>Used when changed item is clicked.</summary>
            <returns>The mouse <paramref name="button" /> used and the clicked <paramref name="item"/> if it is of a known type, null otherwise.</returns>
        </member>
        <member name="T:Penumbra.Api.GameObjectRedrawnDelegate">
            <summary>Used when a game object is redrawn by Penumbra.</summary>
            <returns>The <paramref name="objectPtr" /> to the redrawn object and its <paramref name="objectTableIndex" />.</returns>
        </member>
        <member name="T:Penumbra.Api.ModSettingChangedDelegate">
            <summary>
            Used when the setting of a mod is changed in any way.
            </summary>
            <returns>The <paramref name="type" /> of change, <para />
            the <paramref name="collectionName" /> in which the setting is changed, <para />
            the <paramref name="modDirectory" /> name of the mod, <para />
            and whether the change was <paramref name="inherited" /> or not.</returns>
        </member>
        <member name="T:Penumbra.Api.CreatingCharacterBaseDelegate">
            <summary>
            Used before a new character base draw object is created from a <paramref name="gameObject" />.
            </summary>
            <returns>A pointer to the source <paramref name="gameObject" />, <para />
            the <paramref name="collectionName" /> used for the object, <para />
            a pointer to the used <paramref name="modelId" /> (of type <c>ushort*</c>), <para />
            a pointer to the <paramref name="customize" /> array, <para />
            and a pointer to the <paramref name="equipData" /> array.</returns>
        </member>
        <member name="T:Penumbra.Api.CreatedCharacterBaseDelegate">
            <summary>
            Used after a character base <paramref name="drawObject" /> has been created from a <paramref name="gameObject" />.
            </summary>
            <returns>A pointer to the source <paramref name="gameObject" />, <para />
            the <paramref name="collectionName" /> used for the object, <para />
            a pointer to newly created <paramref name="drawObject" />.</returns>
        </member>
        <member name="T:Penumbra.Api.GameObjectResourceResolvedDelegate">
            <summary>
            Used when a specific game object has resolved a path to a non-default path.
            </summary>
            <returns>A pointer to the source <paramref name="gameObject" />, <para />
            the original <paramref name="gamePath" /> that was resolved by Penumbra, <para />
            the resulting <paramref name="localPath" /> returned by Penumbra.</returns>
        </member>
        <member name="T:Penumbra.Api.Enums.ChangedItemType">
            <summary>
            Describes known types of changed items that could provide special care.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.GroupType">
            <summary>
            The selection type for mod option groups.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.GroupType.Single">
            <summary>
            Exactly one option of this group has to be selected (if any exist).
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.GroupType.Multi">
            <summary>
            Any number of options in this group can be toggled on or off at the same time.
            Limits the number of options in a single group to 32 at the most.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.ModSettingChange">
            <summary>
            Describes the way a mod can change its settings.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.ModSettingChange.Inheritance">
            <summary>
            It was set to inherit from other collections or not to inherit anymore.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.ModSettingChange.EnableState">
            <summary>
            It was enabled or disabled.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.ModSettingChange.Priority">
            <summary>
            Its priority was changed.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.ModSettingChange.Setting">
            <summary>
            A specific setting for an option group was changed.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.ModSettingChange.MultiInheritance">
            <summary>
            Multiple mods were set to inherit from other collections or not inherit anymore at once.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.ModSettingChange.MultiEnableState">
            <summary>
            Multiple mods were enabled or disabled at once.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.MouseButton">
            <summary>
            Describes which mouse button was used to click an element.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.PenumbraApiEc">
            <summary>
            Error codes returned by some Penumbra.Api calls.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.RedrawType">
            <summary>
            The way a specific game object shall be redrawn.
            Actors can be redrawn immediately or after GPose.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.TabType">
            <summary>
            The different tabs of the main window that are available.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Enums.TextureType">
            <summary>
            The different types of textures a given texture can be converted to.
            </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.Png">
            <summary> Convert the texture to .png. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.AsIsTex">
            <summary> Keep the texture format as it is but save as .tex. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.AsIsDds">
            <summary> Keep the texture format as it is but save as .dds. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.RgbaTex">
            <summary> Convert the texture to RGBA32 and save as .tex. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.RgbaDds">
            <summary> Convert the texture to RGBA32 and save as .dds. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.Bc3Tex">
            <summary> Convert the texture to BC3 and save as .tex. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.Bc3Dds">
            <summary> Convert the texture to BC3 and save as .dds. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.Bc7Tex">
            <summary> Convert the texture to BC3 and save as .tex. </summary>
        </member>
        <member name="F:Penumbra.Api.Enums.TextureType.Bc7Dds">
            <summary> Convert the texture to BC3 and save as .dds. </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionProvider">
            <summary>
            Specialized disposable Provider for Actions.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionProvider`1">
            <summary>
            Specialized disposable Provider for Actions.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionProvider`2">
            <summary>
            <inheritdoc cref="T:Penumbra.Api.Helpers.ActionProvider`1"/>
            </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionProvider`3">
            <summary>
            <inheritdoc cref="T:Penumbra.Api.Helpers.ActionProvider`1"/>
            </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionSubscriber">
            <summary>
            Specialized subscriber only allowing to invoke actions.
            </summary>
        </member>
        <member name="P:Penumbra.Api.Helpers.ActionSubscriber.Valid">
            <summary> Whether the subscriber could successfully be created. </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.ActionSubscriber.Invoke">
            <summary> Invoke the action. See the source of the subscriber for details.</summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionSubscriber`1">
            <inheritdoc cref="T:Penumbra.Api.Helpers.ActionSubscriber"/> 
        </member>
        <member name="P:Penumbra.Api.Helpers.ActionSubscriber`1.Valid">
            <summary> Whether the subscriber could successfully be created. </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.ActionSubscriber`1.Invoke(`0)">
            <summary> Invoke the action. See the source of the subscriber for details.</summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.ActionSubscriber`2">
            <inheritdoc cref="T:Penumbra.Api.Helpers.ActionSubscriber"/> 
        </member>
        <member name="P:Penumbra.Api.Helpers.ActionSubscriber`2.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.ActionSubscriber`1.Valid"/> 
        </member>
        <member name="M:Penumbra.Api.Helpers.ActionSubscriber`2.Invoke(`0,`1)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.ActionSubscriber.Invoke"/> 
        </member>
        <member name="T:Penumbra.Api.Helpers.EventProvider">
            <summary>
            Specialized disposable Provider for Events.<para />
            Will execute the unsubscriber action on dispose if any is provided.<para />
            Can only be invoked and disposed.
            </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventProvider.Invoke">
            <summary> Invoke the event.</summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventProvider`1">
            <inheritdoc cref="T:Penumbra.Api.Helpers.EventProvider"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventProvider`1.Invoke(`0)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.EventProvider.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventProvider`2">
            <inheritdoc cref="T:Penumbra.Api.Helpers.EventProvider"/> 
        </member>
        <member name="M:Penumbra.Api.Helpers.EventProvider`2.Invoke(`0,`1)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.EventProvider.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventProvider`3">
            <inheritdoc cref="T:Penumbra.Api.Helpers.EventProvider"/> 
        </member>
        <member name="M:Penumbra.Api.Helpers.EventProvider`3.Invoke(`0,`1,`2)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.EventProvider.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventProvider`4">
            <inheritdoc cref="T:Penumbra.Api.Helpers.EventProvider"/> 
        </member>
        <member name="M:Penumbra.Api.Helpers.EventProvider`4.Invoke(`0,`1,`2,`3)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.EventProvider.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventProvider`5">
            <inheritdoc cref="T:Penumbra.Api.Helpers.EventProvider"/> 
        </member>
        <member name="M:Penumbra.Api.Helpers.EventProvider`5.Invoke(`0,`1,`2,`3,`4)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.EventProvider.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventSubscriber">
            <summary>
            Specialized disposable Subscriber for Events.<para />
            Subscriptions are wrapped to be individually exception-safe.<para/>
            Can be enabled and disabled.<para/>
            </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber.Enable">
            <summary>
            Enable all currently subscribed actions registered with this EventSubscriber.
            Does nothing if it is already enabled.
            </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber.Disable">
            <summary>
            Disable all subscribed actions registered with this EventSubscriber.
            Does nothing if it is already disabled.
            Does not forget the actions, only disables them.
            </summary>
        </member>
        <member name="E:Penumbra.Api.Helpers.EventSubscriber.Event">
            <summary>
            Add or remove an action to the IPC event, if it is valid.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventSubscriber`1">
            <summary><inheritdoc cref="T:Penumbra.Api.Helpers.EventSubscriber"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`1.Enable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Enable"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`1.Disable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Disable"/> </summary>
        </member>
        <member name="E:Penumbra.Api.Helpers.EventSubscriber`1.Event">
            <summary><inheritdoc cref="E:Penumbra.Api.Helpers.EventSubscriber.Event"/> </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventSubscriber`2">
            <summary><inheritdoc cref="T:Penumbra.Api.Helpers.EventSubscriber"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`2.Enable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Enable"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`2.Disable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Disable"/> </summary>
        </member>
        <member name="E:Penumbra.Api.Helpers.EventSubscriber`2.Event">
            <summary><inheritdoc cref="E:Penumbra.Api.Helpers.EventSubscriber.Event"/> </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventSubscriber`3">
            <summary><inheritdoc cref="T:Penumbra.Api.Helpers.EventSubscriber"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`3.Enable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Enable"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`3.Disable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Disable"/> </summary>
        </member>
        <member name="E:Penumbra.Api.Helpers.EventSubscriber`3.Event">
            <summary><inheritdoc cref="E:Penumbra.Api.Helpers.EventSubscriber.Event"/> </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventSubscriber`4">
            <summary><inheritdoc cref="T:Penumbra.Api.Helpers.EventSubscriber"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`4.Enable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Enable"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`4.Disable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Disable"/> </summary>
        </member>
        <member name="E:Penumbra.Api.Helpers.EventSubscriber`4.Event">
            <summary><inheritdoc cref="E:Penumbra.Api.Helpers.EventSubscriber.Event"/> </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.EventSubscriber`5">
            <summary><inheritdoc cref="T:Penumbra.Api.Helpers.EventSubscriber"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`5.Enable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Enable"/> </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.EventSubscriber`5.Disable">
            <summary><inheritdoc cref="M:Penumbra.Api.Helpers.EventSubscriber.Disable"/> </summary>
        </member>
        <member name="E:Penumbra.Api.Helpers.EventSubscriber`5.Event">
            <summary><inheritdoc cref="E:Penumbra.Api.Helpers.EventSubscriber.Event"/> </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncProvider`1">
            <summary>
            Specialized disposable Provider for Funcs.
            </summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncProvider`2">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncProvider`1"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncProvider`3">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncProvider`1"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncProvider`4">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncProvider`1"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncProvider`5">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncProvider`1"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncProvider`6">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncProvider`1"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncSubscriber`1">
            <summary>
            Specialized subscriber only allowing to invoke functions with a return.
            </summary>
        </member>
        <member name="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid">
            <summary> Whether the subscriber could successfully be created. </summary>
        </member>
        <member name="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke">
            <summary> Invoke the function. See the source of the subscriber for details.</summary>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncSubscriber`2">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.FuncSubscriber`2.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.FuncSubscriber`2.Invoke(`0)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.ParamsFuncSubscriber`2">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.ParamsFuncSubscriber`2.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.ParamsFuncSubscriber`2.Invoke(`0[])">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncSubscriber`3">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.FuncSubscriber`3.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.FuncSubscriber`3.Invoke(`0,`1)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncSubscriber`4">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.FuncSubscriber`4.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.FuncSubscriber`4.Invoke(`0,`1,`2)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.ParamsFuncSubscriber`4">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.ParamsFuncSubscriber`4.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.ParamsFuncSubscriber`4.Invoke(`0,`1,`2[])">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncSubscriber`5">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.FuncSubscriber`5.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.FuncSubscriber`5.Invoke(`0,`1,`2,`3)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Helpers.FuncSubscriber`6">
            <inheritdoc cref="T:Penumbra.Api.Helpers.FuncSubscriber`1"/>
        </member>
        <member name="P:Penumbra.Api.Helpers.FuncSubscriber`6.Valid">
            <inheritdoc cref="P:Penumbra.Api.Helpers.FuncSubscriber`1.Valid"/>
        </member>
        <member name="M:Penumbra.Api.Helpers.FuncSubscriber`6.Invoke(`0,`1,`2,`3,`4)">
            <inheritdoc cref="M:Penumbra.Api.Helpers.FuncSubscriber`1.Invoke"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCollections">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCollections"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCurrentCollectionName">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCurrentCollection"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetDefaultCollectionName">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetDefaultCollection"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetInterfaceCollectionName">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetInterfaceCollection"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCharacterCollectionName">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCharacterCollection(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetChangedItems">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetChangedItemsForCollection(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCollectionForType">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCollectionForType(Penumbra.Api.Enums.ApiCollectionType)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.SetCollectionForType">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.SetCollectionForType(Penumbra.Api.Enums.ApiCollectionType,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCollectionForObject">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCollectionForObject(System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.SetCollectionForObject">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.SetCollectionForObject(System.Int32,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetModDirectory">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetModDirectory"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetConfiguration">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetConfiguration"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ModDirectoryChanged">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ModDirectoryChanged"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ConvertTextureFile">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ConvertTextureFile(System.String,System.String,Penumbra.Api.Enums.TextureType,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ConvertTextureData">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ConvertTextureData(System.Byte[],System.Int32,System.String,Penumbra.Api.Enums.TextureType,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetDrawObjectInfo">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetDrawObjectInfo(System.IntPtr)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCutsceneParentIndex">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCutsceneParentIndex(System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.CreatingCharacterBase">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.CreatingCharacterBase"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.CreatedCharacterBase">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.CreatedCharacterBase"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GameObjectResourcePathResolved">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.GameObjectResourceResolved"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetPlayerMetaManipulations">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetPlayerMetaManipulations"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetMetaManipulations">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetMetaManipulations(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetGameObjectMetaManipulations">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetGameObjectMetaManipulations(System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetMods">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetModList"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ReloadMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ReloadMod(System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.InstallMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.InstallMod(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.AddMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.AddMod(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.DeleteMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.DeleteMod(System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ModDeleted">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ModDeleted" />
        </member>
        <member name="T:Penumbra.Api.Ipc.ModAdded">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ModAdded" />
        </member>
        <member name="T:Penumbra.Api.Ipc.ModMoved">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ModMoved" />
        </member>
        <member name="T:Penumbra.Api.Ipc.GetModPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetModPath(System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.SetModPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.SetModPath(System.String,System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetAvailableModSettings">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetAvailableModSettings(System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetCurrentModSettings">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetCurrentModSettings(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.TryInheritMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.TryInheritMod(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.TrySetMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.TrySetMod(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.TrySetModPriority">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.TrySetModPriority(System.String,System.String,System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.TrySetModSetting">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.TrySetModSetting(System.String,System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.TrySetModSettings">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.TrySetModSettings(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ModSettingChanged">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ModSettingChanged"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.CopyModSettings">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.CopyModSettings(System.String,System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.Initialized">
            <summary>Triggered when the Penumbra API is initialized and ready.</summary>
        </member>
        <member name="T:Penumbra.Api.Ipc.Disposed">
            <summary>Triggered when the Penumbra API is fully disposed and unavailable.</summary>
        </member>
        <member name="T:Penumbra.Api.Ipc.ApiVersion">
            <inheritdoc cref="P:Penumbra.Api.IPenumbraApiBase.ApiVersion"/>
            <remarks>Deprecated, please use <see cref="T:Penumbra.Api.Ipc.ApiVersions"/> instead.</remarks>
        </member>
        <member name="T:Penumbra.Api.Ipc.ApiVersions">
            <inheritdoc cref="P:Penumbra.Api.IPenumbraApiBase.ApiVersion"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetEnabledState">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetEnabledState"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.EnabledChange">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.EnabledChange"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RedrawAll">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RedrawAll(Penumbra.Api.Enums.RedrawType)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RedrawObject">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RedrawObject(Dalamud.Game.ClientState.Objects.Types.GameObject,Penumbra.Api.Enums.RedrawType)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RedrawObjectByIndex">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RedrawObject(System.Int32,Penumbra.Api.Enums.RedrawType)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RedrawObjectByName">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RedrawObject(System.String,Penumbra.Api.Enums.RedrawType)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GameObjectRedrawn">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.GameObjectRedrawn"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ResolveDefaultPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ResolveDefaultPath(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ResolveInterfacePath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ResolveInterfacePath(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ResolvePlayerPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ResolvePlayerPath(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ResolveCharacterPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ResolvePath(System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ResolveGameObjectPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ResolveGameObjectPath(System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ReverseResolvePath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ReverseResolvePath(System.String,System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ReverseResolveGameObjectPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ReverseResolveGameObjectPath(System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ReverseResolvePlayerPath">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ReverseResolvePlayerPath(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ResolvePlayerPaths">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.ResolvePlayerPaths(System.String[],System.String[])"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetGameObjectResourcePaths">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetGameObjectResourcePaths(System.UInt16[])"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetPlayerResourcePaths">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetPlayerResourcePaths"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetGameObjectResourcesOfType">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetGameObjectResourcesOfType(Penumbra.Api.Enums.ResourceType,System.Boolean,System.UInt16[])"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.GetPlayerResourcesOfType">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.GetPlayerResourcesOfType(Penumbra.Api.Enums.ResourceType,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.CreateTemporaryCollection">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.CreateTemporaryCollection(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RemoveTemporaryCollection">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryCollection(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.CreateNamedTemporaryCollection">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.CreateNamedTemporaryCollection(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RemoveTemporaryCollectionByName">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryCollectionByName(System.String)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.AssignTemporaryCollection">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.AssignTemporaryCollection(System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.AddTemporaryModAll">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.AddTemporaryModAll(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.AddTemporaryMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.AddTemporaryMod(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RemoveTemporaryModAll">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryModAll(System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.RemoveTemporaryMod">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryMod(System.String,System.String,System.Int32)"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.PreSettingsDraw">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.PreSettingsPanelDraw"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.PostSettingsDraw">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.PostSettingsPanelDraw"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ChangedItemTooltip">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ChangedItemTooltip"/>
        </member>
        <member name="T:Penumbra.Api.Ipc.ChangedItemClick">
            <inheritdoc cref="E:Penumbra.Api.IPenumbraApi.ChangedItemClicked"/>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetModDirectory">
            <returns>The current penumbra root directory.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetConfiguration">
            <returns>The entire current penumbra configuration as a json encoded string.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ModDirectoryChanged">
            <summary>
            Fired whenever a mod directory change is finished.
            </summary>
            <returns>The full path of the mod directory and whether Penumbra treats it as valid.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetEnabledState">
            <returns>True if Penumbra is enabled, false otherwise.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.EnabledChange">
            <summary>
            Fired whenever the enabled state of Penumbra changes.
            </summary>
            <returns>True if the new state is enabled, false if the new state is disabled</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ChangedItemTooltip">
            <summary>
            Triggered when the user hovers over a listed changed object in a mod tab.<para />
            Can be used to append tooltips.
            </summary>
            <returns><inheritdoc cref="T:Penumbra.Api.ChangedItemHover"/></returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.PreSettingsPanelDraw">
            <summary>
            Triggered before the content of a mod settings panel is drawn.
            </summary>
            <returns>The directory name of the currently selected mod.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.PostSettingsPanelDraw">
            <summary>
            Triggered after the content of a mod settings panel is drawn, but still in the child window.
            </summary>
            <returns>The directory name of the currently selected mod.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ChangedItemClicked">
            <summary>
            Triggered when the user clicks a listed changed object in a mod tab.
            </summary>
            <returns><inheritdoc cref="T:Penumbra.Api.ChangedItemClick"/></returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.OpenMainWindow(Penumbra.Api.Enums.TabType,System.String,System.String)">
            <summary>
            Open the Penumbra main config window.
            </summary>
            <param name="tab">Open the window at a specific tab. Use TabType.None to not change the tab. </param>
            <param name="modDirectory">Select a mod specified via its directory name in the mod tab, empty if none.</param>
            <param name="modName">Select a mod specified via its mod name in the mod tab, empty if none.</param>
            <returns>InvalidArgument if <paramref name="tab"/> is invalid,
            ModMissing if <paramref name="modDirectory"/> or <paramref name="modName"/> are set non-empty and the mod does not exist,
            Success otherwise.</returns>
            <remarks>If <paramref name="tab"/> is not TabType.Mods, the mod will not be selected regardless of other parameters and ModMissing will not be returned.</remarks>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.CloseMainWindow">
            <summary> Close the Penumbra main config window. </summary>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RedrawObject(System.String,Penumbra.Api.Enums.RedrawType)">
            <summary>
            Queue redrawing of all actors of the given <paramref name="name"/> with the given RedrawType <paramref name="setting"/>.
            </summary>
            <param name="name" />
            <param name="setting" />
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RedrawObject(Dalamud.Game.ClientState.Objects.Types.GameObject,Penumbra.Api.Enums.RedrawType)">
            <summary>
            Queue redrawing of the specific actor <paramref name="gameObject"/> with the given RedrawType <paramref name="setting"/>. Should only be used when the actor is sure to be valid.
            </summary>
            <param name="gameObject" />
            <param name="setting" />
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RedrawObject(System.Int32,Penumbra.Api.Enums.RedrawType)">
            <summary>
            Queue redrawing of the actor with the given object <paramref name="tableIndex" />, if it exists, with the given RedrawType <paramref name="setting"/>.
            </summary>
            <param name="tableIndex" />
            <param name="setting" />
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RedrawAll(Penumbra.Api.Enums.RedrawType)">
            <summary>
            Queue redrawing of all currently available actors with the given RedrawType <paramref name="setting"/>.
            </summary>
            <param name="setting" />
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.GameObjectRedrawn">
            <summary>
            Triggered whenever a game object is redrawn via Penumbra.
            </summary>
            /<returns><inheritdoc cref="T:Penumbra.Api.GameObjectRedrawnDelegate"/></returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetDrawObjectInfo(System.IntPtr)">
            <param name="drawObject"></param>
            <returns>The game object associated with the given <paramref name="drawObject">draw object</paramref> and the name of the collection associated with this game object.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCutsceneParentIndex(System.Int32)">
            <summary>
            Obtain the parent game object index for an unnamed cutscene actor by its <paramref name="actorIdx">index</paramref>.
            </summary>
            <param name="actorIdx"></param>
            <returns>The parent game object index.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.CreatingCharacterBase">
            <summary>
            Triggered when a character base is created and a corresponding gameObject could be found,
            before the Draw Object is actually created, so customize and equipdata can be manipulated beforehand.
            </summary>
            <returns><inheritdoc cref="T:Penumbra.Api.CreatingCharacterBaseDelegate"/></returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.CreatedCharacterBase">
            <summary>
            Triggered after a character base was created if a corresponding gameObject could be found,
            so you can apply flag changes after finishing.
            </summary>
            <returns><inheritdoc cref="T:Penumbra.Api.CreatedCharacterBaseDelegate"/></returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.GameObjectResourceResolved">
            <summary>
            Triggered whenever a resource is redirected by Penumbra for a specific, identified game object.
            Does not trigger if the resource is not requested for a known game object.
            </summary>
            <returns><inheritdoc cref="T:Penumbra.Api.GameObjectResourceResolvedDelegate"/></returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ResolveDefaultPath(System.String)">
            <summary>
            Resolve a given <paramref name="gamePath" /> via Penumbra using the Base collection.
            </summary>
            <returns>The resolved path, or the given path if Penumbra would not manipulate it.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ResolveInterfacePath(System.String)">
            <summary>
            Resolve a given <paramref name="gamePath" /> via Penumbra using the Interface collection.
            </summary>
            <returns>The resolved path, or the given path if Penumbra would not manipulate it.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ResolvePath(System.String,System.String)">
            <summary>
            Resolve a given <paramref name="gamePath" /> via Penumbra using the character collection
            for <paramref name="characterName" /> or the Base collection if none exists.
            </summary>
            <returns>The resolved path, or the given path if Penumbra would not manipulate it.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ResolveGameObjectPath(System.String,System.Int32)">
            <summary>
            Resolve a given <paramref name="gamePath" /> via Penumbra using collection applying to the <paramref name="gameObjectIdx"/> 
            given by its index in the game object table.
            </summary>
            <remarks>If the object does not exist in the table, the default collection is used.</remarks>
            <returns>The resolved path, or the given path if Penumbra would not manipulate it.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ResolvePlayerPath(System.String)">
            <summary>
            Resolve a given <paramref name="gamePath" /> via Penumbra using the collection currently applying to the player character.
            </summary>
            <returns>The resolved path, or the given path if Penumbra would not manipulate it.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ReverseResolvePath(System.String,System.String)">
            <summary>
            Reverse resolves a given local <paramref name="moddedPath" /> into its replacement in form of all applicable game paths
            for the character collection for <paramref name="characterName" />.
            </summary>
            <returns>A list of game paths resolving to the modded path.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ReverseResolveGameObjectPath(System.String,System.Int32)">
            <summary>
            Reverse resolves a given local <paramref name="moddedPath" /> into its replacement in form of all applicable game paths
            for the collection applying to the <paramref name="gameObjectIdx"/>th game object in the game object table.
            </summary>
            <remarks>If the object does not exist in the table, the default collection is used.</remarks>
            <returns>A list of game paths resolving to the modded path.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ReverseResolvePlayerPath(System.String)">
            <summary>
            Reverse resolves a given local <paramref name="moddedPath" /> into its replacement in form of all applicable game paths
            for the collection currently applying to the player character.
            </summary>
            <returns>A list of game paths resolving to the modded path.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ResolvePlayerPaths(System.String[],System.String[])">
            <summary>
            Resolve all game paths in <paramref name="forward"/> and reserve all paths in <paramref name="reverse"/> at once.
            </summary>
            <param name="forward">Paths to forward-resolve.</param>
            <param name="reverse">Paths to reverse-resolve.</param>
            <returns>A pair of an array of forward-resolved single paths of the same length as <paramref name="forward"/> and an array of arrays of reverse-resolved paths.
            The outer array has the same length as <paramref name="reverse"/> while each inner array can have arbitrary length.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetFile``1(System.String)">
            <summary>
            Try to load a given <paramref name="gamePath" /> with the resolved path from Penumbras Base collection.
            </summary>
            <returns>The file of type T if successful, null otherwise.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetFile``1(System.String,System.String)">
            <summary>
            Try to load a given <paramref name="gamePath" /> with the resolved path from Penumbra
            using the character collection for <paramref name="characterName" />.
            </summary>
            <returns>The file of type T if successful, null otherwise.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCollections">
            <returns>A list of the names of all currently installed collections.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCurrentCollection">
            <returns>The name of the currently selected collection.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetDefaultCollection">
            <returns>The name of the default collection.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetInterfaceCollection">
            <returns>The name of the interface collection.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCharacterCollection(System.String)">
            <returns>The name of the collection associated with <paramref name="characterName"/> and whether it exists as character collection.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetChangedItemsForCollection(System.String)">
            <returns>A dictionary of affected items in <paramref name="collectionName"/> via name and known objects or null.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCollectionForType(Penumbra.Api.Enums.ApiCollectionType)">
            <returns>The name of the collection assigned to the given <paramref name="type"/> or an empty string if none is assigned or type is invalid.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.SetCollectionForType(Penumbra.Api.Enums.ApiCollectionType,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set a collection by name for a specific type.
            </summary>
            <param name="type">The collection type to set.</param>
            <param name="collectionName">The name of the collection to set it to.</param>
            <param name="allowCreateNew">Allow only setting existing types or also creating an unset type.</param>
            <param name="allowDelete">Allow deleting existing collections if <paramref name="collectionName"/> is empty.</param>
            <returns>InvalidArgument if type is invalid,
            NothingChanged if the new collection is the same as the old,<br />
            AssignmentDeletionDisallowed if <paramref name="collectionName"/> is empty and <paramref name="allowDelete"/> is false, and the assignment exists,<br />
            or if Default, Current or Interface would be deleted.<br />
            CollectionMissing if the new collection can not be found,<br />
            AssignmentCreationDisallowed if <paramref name="allowCreateNew"/> is false and the assignment does not exist,<br />
            or Success, as well as the name of the previous collection (empty if no assignment existed).
            </returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCollectionForObject(System.Int32)">
            <returns>Return whether the object at <paramref name="gameObjectIdx" /> produces a valid identifier, if the identifier has a collection assigned, and the collection that affects the object.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.SetCollectionForObject(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set a collection by name for a specific game object.
            </summary>
            <param name="gameObjectIdx">The index of the desired game object in the object table.</param>
            <param name="collectionName">The name of the collection to set it to.</param>
            <param name="allowCreateNew">Allow only setting existing individuals or also creating a new individual assignment.</param>
            <param name="allowDelete">Allow deleting existing individual assignments if <paramref name="collectionName"/> is empty.</param>
            <returns>InvalidIdentifier if <paramref name="gameObjectIdx"/> does not produce an existing game object or the object is not indentifiable,
            NothingChanged if the new collection is the same as the old,<br />
            AssignmentDeletionDisallowed if <paramref name="collectionName"/> is empty and <paramref name="allowDelete"/> is false, and the assignment exists,<br />
            CollectionMissing if the new collection can not be found,<br />
            AssignmentCreationDisallowed if <paramref name="allowCreateNew"/> is false and the assignment does not exist,<br />
            or Success, as well as the name of the previous collection (empty if no assignment existed).</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetPlayerMetaManipulations">
            <returns>A base64 encoded, zipped json-string with a prepended version-byte of the current manipulations
            in the collection currently associated with the player.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetMetaManipulations(System.String)">
            <returns>A base64 encoded, zipped json-string with a prepended version-byte of the current manipulations
            in the given collection associated with the character name, or the default collection.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetGameObjectMetaManipulations(System.Int32)">
            <returns>A base64 encoded, zipped json-string with a prepended version-byte of the current manipulations
            in the given collection applying to the given game object or the default collection if it does not exist.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetModList">
            <returns>A list of all installed mods. The first string is their directory name, the second string is their mod name.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.InstallMod(System.String)">
            <summary> Try to unpack and install a valid mod file (.pmp, .ttmp, .ttmp2) as if installed manually. </summary>
            <param name="path">The file that should be unpacked.</param>
            <returns>Success, MissingFile. Success does not indicate successful installing, just successful queueing for install.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ReloadMod(System.String,System.String)">
            <summary> Try to reload an existing mod given by its <paramref name="modDirectory" /> name or <paramref name="modName" />.</summary>
            <remarks>Reload is the same as if triggered by button press and might delete the mod if it is not valid anymore.</remarks>
            <returns>ModMissing if the mod can not be found or Success</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.AddMod(System.String)">
            <summary> Try to add a new mod inside the mod root directory.</summary>
            <remarks>Note that success does only imply a successful call, not a successful mod load.</remarks>
            <param name="modDirectory">The name (not full name) of the mod directory.</param>
            <returns>FileMissing if <paramref name="modDirectory" /> does not exist, Success otherwise.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.DeleteMod(System.String,System.String)">
            <summary>Try to delete a mod  given by its <paramref name="modDirectory" /> name or <paramref name="modName" />.</summary>
            <remarks>Note that success does only imply a successful call, not successful deletion.</remarks>
            <returns>NothingDone if the mod can not be found, Success otherwise.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ModDeleted">
            <summary> Triggers whenever a mod is deleted. </summary>
            <returns>The base directory name of the deleted mod.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ModAdded">
            <summary> Triggers whenever a mod is deleted. </summary>
            <returns>The base directory name of the new mod.</returns>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ModMoved">
            <summary> Triggers whenever a mods base name is changed from inside Penumbra. </summary>
            <returns>The previous base directory name of the mod and the new base directory name of the mod.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetModPath(System.String,System.String)">
            <summary>
            Get the internal full filesystem path including search order for the specified mod
            given by its <paramref name="modDirectory" /> name or <paramref name="modName" />.
            </summary>
            <returns>On Success, the full path and a bool indicating whether this is default (false) or manually set (true).
            Otherwise returns ModMissing if the mod can not be found.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.SetModPath(System.String,System.String,System.String)">
            <summary>
            Set the internal search order and filesystem path of the specified mod
            given by its <paramref name="modDirectory" /> name or <paramref name="modName" />
            to the <paramref name="newPath" />.
            </summary>
            <returns>InvalidArgument if <paramref name="newPath" /> is empty, ModMissing if the mod can not be found,
            PathRenameFailed if <paramref name="newPath"/> could not be set or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetAvailableModSettings(System.String,System.String)">
            <summary>
            Obtain the potential settings of a mod given by its <paramref name="modDirectory" /> name or <paramref name="modName" />.
            </summary>
            <returns>A dictionary of group names to lists of option names and the group type. Null if the mod could not be found.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetCurrentModSettings(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Obtain the enabled state, the priority, the settings of a mod given by its <paramref name="modDirectory" /> name or <paramref name="modName" /> in the specified collection.
            </summary>
            <param name="collectionName">Specify the collection.</param>
            <param name="modDirectory">Specify the mod via its directory name.</param>
            <param name="modName">Specify the mod via its (non-unique) display name.</param>
            <param name="allowInheritance">Whether the settings need to be from the given collection or can be inherited from any other by it.</param>
            <returns>ModMissing, CollectionMissing or Success. <para />
            On Success, a tuple of Enabled State, Priority, a dictionary of option group names and lists of enabled option names and a bool whether the settings are inherited or not.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.TryInheritMod(System.String,System.String,System.String,System.Boolean)">
            <summary> Try to set the inheritance state of a mod in a collection. </summary>
            <returns>ModMissing, CollectionMissing, NothingChanged or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.TrySetMod(System.String,System.String,System.String,System.Boolean)">
            <summary> Try to set the enabled state of a mod in a collection. </summary>
            <returns>ModMissing, CollectionMissing, NothingChanged or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.TrySetModPriority(System.String,System.String,System.String,System.Int32)">
            <summary> Try to set the priority of a mod in a collection. </summary>
            <returns>ModMissing, CollectionMissing, NothingChanged or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.TrySetModSetting(System.String,System.String,System.String,System.String,System.String)">
            <summary> Try to set a specific option group of a mod in the given collection to a specific value. </summary>
            <remarks>Removes inheritance. Single Selection groups should provide a single option, Multi Selection can provide multiple.
            If any setting can not be found, it will not change anything.</remarks>
            <returns>ModMissing, CollectionMissing, OptionGroupMissing, SettingMissing, NothingChanged or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.TrySetModSettings(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <inheritdoc cref="M:Penumbra.Api.IPenumbraApi.TrySetModSetting(System.String,System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="E:Penumbra.Api.IPenumbraApi.ModSettingChanged">
            <summary> This event gets fired when any setting in any collection changes. </summary>
            <returns><inheritdoc cref="T:Penumbra.Api.ModSettingChangedDelegate" /></returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.CopyModSettings(System.String,System.String,System.String)">
            <summary>
            Copy all current settings for a mod to another mod.
            </summary>
            <param name="collectionName">Specify the collection to work in, leave empty or null to do it in all collections.</param>
            <param name="modDirectoryFrom">Specify the mod to take the settings from via its directory name.</param>
            <param name="modDirectoryTo">Specify the mod to put the settings on via its directory name. If the mod does not exist, it will be added as unused settings.</param>
            <returns>CollectionMissing if collectionName is not empty but does not exist or Success.</returns>
            <remarks>If the target mod exists, the settings will be fixed before being applied. If the source mod does not exist, it will use unused settings if available and remove existing settings otherwise.</remarks>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ConvertTextureFile(System.String,System.String,Penumbra.Api.Enums.TextureType,System.Boolean)">
            <summary>
            Convert the given texture file into a different type or format and potentially add mip maps.
            </summary>
            <param name="inputFile"> The path to the input file, which may be of .dds, .tex or .png format. </param>
            <param name="outputFile"> The desired output path. Can be the same as input. </param>
            <param name="textureType"> The file type and format to convert the data to. </param>
            <param name="mipMaps"> Whether to add mip maps or not. Ignored for .png. </param>
            <returns> A task for when the conversion is finished or has failed. </returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.ConvertTextureData(System.Byte[],System.Int32,System.String,Penumbra.Api.Enums.TextureType,System.Boolean)">
            <summary>
            Convert the given RGBA32 texture data into a different type or format and potentially add mip maps.
            </summary>
            <param name="rgbaData"> The input byte data for a picture given in RGBA32 format. </param>
            <param name="width"> The width of the input picture. The height is computed from the size of <paramref name="rgbaData"/> and this. </param>
            <param name="outputFile"> The desired output path. Can be the same as input. </param>
            <param name="textureType"> The file type and format to convert the data to. </param>
            <param name="mipMaps"> Whether to add mip maps or not. Ignored for .png. </param>
            <returns> A task for when the conversion is finished or has failed. </returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.CreateTemporaryCollection(System.String,System.String,System.Boolean)">
            <summary>
            Create a temporary collection without actual settings but with a cache and assign it to a specific character by name only.
            </summary>
            <remarks>This function is outdated, prefer to use <see cref="M:Penumbra.Api.IPenumbraApi.CreateNamedTemporaryCollection(System.String)"/> and <see cref="M:Penumbra.Api.IPenumbraApi.AssignTemporaryCollection(System.String,System.Int32,System.Boolean)"/>.</remarks>
            <param name="tag">A custom tag for your collections.</param>
            <param name="character">The full, case-sensitive character name this collection should apply to.</param>
            <param name="forceOverwriteCharacter">Whether to overwrite an existing character collection.</param>
            <returns>Success, CharacterCollectionExists or NothingChanged and the name of the new temporary collection on success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.CreateNamedTemporaryCollection(System.String)">
            <summary>
            Create a temporary collection of the given <paramref name="name"/>.
            </summary>
            <param name="name">The intended name. It may not be empty or contain symbols invalid in a path used by XIV.</param>
            <returns>Success, InvalidArgument if name is not valid for a collection, or TemporaryCollectionExists.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.AssignTemporaryCollection(System.String,System.Int32,System.Boolean)">
            <summary>
            Assign an existing temporary collection to an actor that currently occupies a specific slot.
            </summary>
            <param name="collectionName">The chosen collection assigned to the actor.</param>
            <param name="actorIndex">The current object table index of the actor.</param>
            <param name="forceAssignment">Whether to assign even if the actor is already assigned either a temporary or a permanent collection.</param>
            <returns>Success, InvalidArgument if the actor can not be identified, CollectionMissing if the collection does not exist, CharacterCollectionExists if <paramref name="forceAssignment"/> is false and the actor is already assigned a collection, and AssignmentDeletionFailed if <paramref name="forceAssignment"/> is true and the existing temporary assignment could not be deleted. </returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryCollection(System.String)">
            <summary>
            Remove the temporary collection assigned to characterName if it exists.
            </summary>
            <remarks>This function is outdated, prefer to use <see cref="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryCollectionByName(System.String)" />.</remarks>
            <returns>NothingChanged or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryCollectionByName(System.String)">
            <summary>
            Remove the temporary collection of the given name.
            </summary>
            <param name="collectionName">The chosen temporary collection to remove.</param>
            <returns>NothingChanged or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.AddTemporaryModAll(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Set a temporary mod with the given paths, manipulations and priority and the name tag to all regular and temporary collections.
            </summary>
            <param name="tag">Custom name for the temporary mod.</param>
            <param name="paths">List of redirections (can be swaps or redirections).</param>
            <param name="manipString">Zipped Base64 string of meta manipulations.</param>
            <param name="priority">Desired priority.</param>
            <returns>InvalidGamePath, InvalidManipulation or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.AddTemporaryMod(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Set a temporary mod with the given paths, manipulations and priority and the name tag to a specific collection.
            </summary>
            <param name="tag">Custom name for the temporary mod.</param>
            <param name="collectionName">Name of the collection the mod should apply to. Can be a temporary collection name.</param>
            <param name="paths">List of redirections (can be swaps or redirections).</param>
            <param name="manipString">Zipped Base64 string of meta manipulations.</param>
            <param name="priority">Desired priority.</param>
            <returns>CollectionMissing, InvalidGamePath, InvalidManipulation or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryModAll(System.String,System.Int32)">
            <summary>
            Remove the temporary mod with the given tag and priority from the temporary mods applying to all collections, if it exists.
            </summary>
            <param name="tag">The tag to look for.</param>
            <param name="priority">The initially provided priority.</param>
            <returns>NothingDone or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.RemoveTemporaryMod(System.String,System.String,System.Int32)">
            <summary>
            Remove the temporary mod with the given tag and priority from the temporary mods applying to a specific collection, if it exists.
            </summary>
            <param name="tag">The tag to look for.</param>
            <param name="collectionName">Name of the collection the mod should apply to. Can be a temporary collection name.</param>
            <param name="priority">The initially provided priority.</param>
            <returns>CollectionMissing, NothingDone or Success.</returns>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetGameObjectResourcePaths(System.UInt16[])">
            <summary>
            Get the given game objects' resources, as dictionaries of actual paths (that may be FS paths for redirected resources, or game paths for swapped or vanilla resources) to game paths.
            </summary>
            <param name="gameObjects"> The game object indices for which to get the resources. </param>
            <returns> An array of resource path dictionaries, of the same length and in the same order as the given game object index array. </returns>
            <remarks> This function is best called right after the game objects are redrawn, as it may fail to resolve paths if relevant mod settings have changed since then. </remarks>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetPlayerResourcePaths">
            <summary>
            Get the player and player-owned game objects' resources, as dictionaries of actual paths (that may be FS paths for redirected resources, or game paths for swapped or vanilla resources) to game paths.
            </summary>
            <returns> A dictionary of game object indices to resource path dictionaries. </returns>
            <remarks> This function is best called right after the game objects are redrawn, as it may fail to resolve paths if relevant mod settings have changed since then. </remarks>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetGameObjectResourcesOfType(Penumbra.Api.Enums.ResourceType,System.Boolean,System.UInt16[])">
            <summary>
            Get the given game objects' resources of a given type, as dictionaries of resource handles to actual paths and, optionally, names and icons.
            </summary>
            <param name="gameObjects"> The game object indices for which to get the resources. </param>
            <param name="type"> Type of the resources to get, for example <see cref="F:Penumbra.Api.Enums.ResourceType.Mtrl"/> for materials. </param>
            <param name="withUIData"> Whether to get names and icons along with the paths. </param>
            <returns> An array of resource information dictionaries, of the same length and in the same order as the given game object index array. </returns>
            <remarks>
            It is the caller's responsibility to make sure the returned resource handles are still in use on the game object's draw object before using them. <para />
            Also, callers should not use UI data for non-UI purposes.
            </remarks>
        </member>
        <member name="M:Penumbra.Api.IPenumbraApi.GetPlayerResourcesOfType(Penumbra.Api.Enums.ResourceType,System.Boolean)">
            <summary>
            Get the player and player-owned game objects' resources of a given type, as dictionaries of resource handles to actual paths and, optionally, names and icons.
            </summary>
            <param name="type"> Type of the resources to get, for example <see cref="F:Penumbra.Api.Enums.ResourceType.Mtrl"/> for materials. </param>
            <param name="withUIData"> Whether to get names and icons along with the paths. </param>
            <returns> A dictionary of game object indices to resource information dictionaries. </returns>
            <remarks>
            It is the caller's responsibility to make sure the returned resource handles are still in use on the game object's draw object before using them. <para />
            Also, callers should not use UI data for non-UI purposes.
            </remarks>
        </member>
        <member name="T:Penumbra.Api.IPenumbraApiBase">
            <summary>
            Base interface for the API that is always available, regardless of version.
            </summary>
        </member>
        <member name="P:Penumbra.Api.IPenumbraApiBase.ApiVersion">
            <summary>
            The API version is staggered in two parts.
            The major/Breaking version only increments if there are changes breaking backwards compatibility.
            The minor/Feature version increments any time there is something added
            and resets when Breaking is incremented.
            </summary>
        </member>
        <member name="P:Penumbra.Api.IPenumbraApiBase.Valid">
            <summary> Whether the API is still useable. </summary>
        </member>
    </members>
</doc>
