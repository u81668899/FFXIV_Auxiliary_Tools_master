<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECommons</name>
    </assembly>
    <members>
        <member name="T:ECommons.Automation.AutoCutsceneSkipper">
            <summary>
            Provides automatic cutscene skipping trigger. Does not includes cutscene skipping confirmation.
            </summary>
        </member>
        <member name="F:ECommons.Automation.AutoCutsceneSkipper.Condition">
            <summary>
            Condition which will be checked to determine if the cutscene should be skipped. Can be null to skip everything unconditionally.
            </summary>
        </member>
        <member name="M:ECommons.Automation.AutoCutsceneSkipper.Init(System.Func{System.IntPtr,System.Boolean})">
            <summary>
            Initializes cutscene skipper trigger. 
            </summary>
            <param name="cutsceneSkipCondition">Condition which will be checked to determine if the cutscene should be skipped. Can be null to skip everything unconditionally.</param>
            <exception cref="T:System.Exception">If already initialized</exception>
        </member>
        <member name="M:ECommons.Automation.AutoCutsceneSkipper.Disable">
            <summary>
            Disables cutscene skipper trigger. Note that you do not need to call this in Dispose of the plugin, it is disposed automatically.
            </summary>
        </member>
        <member name="M:ECommons.Automation.AutoCutsceneSkipper.Enable">
            <summary>
            Enables previously disabled cutscene trigger. Note that you do not have to call this in constructor of the plugin, it is enabled automatically.
            </summary>
        </member>
        <member name="T:ECommons.Automation.Chat">
            <summary>
            A class containing chat functionality
            </summary>
        </member>
        <member name="M:ECommons.Automation.Chat.SendMessageUnsafe(System.Byte[])">
            <summary>
            <para>
            Send a given message to the chat box. <b>This can send chat to the server.</b>
            </para>
            <para>
            <b>This method is unsafe.</b> This method does no checking on your input and
            may send content to the server that the normal client could not. You must
            verify what you're sending and handle content and length to properly use
            this.
            </para>
            </summary>
            <param name="message">Message to send</param>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.SendMessage(System.String)">
            <summary>
            <para>
            Send a given message to the chat box. <b>This can send chat to the server.</b>
            </para>
            <para>
            This method is slightly less unsafe than <see cref="M:ECommons.Automation.Chat.SendMessageUnsafe(System.Byte[])"/>. It
            will throw exceptions for certain inputs that the client can't normally send,
            but it is still possible to make mistakes. Use with caution.
            </para>
            </summary>
            <param name="message">message to send</param>
            <exception cref="T:System.ArgumentException">If <paramref name="message"/> is empty, longer than 500 bytes in UTF-8, or contains invalid characters.</exception>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.ExecuteCommand(System.String)">
            <summary>
            Executes command as if it was typed in chat box. 
            </summary>
            <param name="message">Full text of the command.</param>
            <exception cref="T:System.InvalidOperationException">If you didn't prefixed it with a slash.</exception>
        </member>
        <member name="M:ECommons.Automation.Chat.SanitiseText(System.String)">
            <summary>
            <para>
            Sanitises a string by removing any invalid input.
            </para>
            <para>
            The result of this method is safe to use with
            <see cref="M:ECommons.Automation.Chat.SendMessage(System.String)"/>, provided that it is not empty or too
            long.
            </para>
            </summary>
            <param name="text">text to sanitise</param>
            <returns>sanitised text</returns>
            <exception cref="T:System.InvalidOperationException">If the signature for this function could not be found</exception>
        </member>
        <member name="P:ECommons.Automation.TaskManager.MaxTasks">
            <summary>
            Number of tasks that were registered in current cycle. Increases each time a task is enqueued and resets once there are no more tasks.
            </summary>
        </member>
        <member name="F:ECommons.Automation.TaskManager.TimeLimitMS">
            <summary>
            After this time limit has passed, a task will be given up.
            </summary>
        </member>
        <member name="F:ECommons.Automation.TaskManager.AbortOnTimeout">
            <summary>
            Whether to abort execution on timeout and clear all remaining tasks or not.
            </summary>
        </member>
        <member name="P:ECommons.Automation.TaskManager.AbortAt">
            <summary>
            Tick count (<see cref="P:System.Environment.TickCount64"/>) at which current task will be aborted
            </summary>
        </member>
        <member name="P:ECommons.Automation.TaskManager.NumQueuedTasks">
            <summary>
            Amount of currently queued tasks, including one that is currently being executed
            </summary>
        </member>
        <member name="F:ECommons.Automation.TaskManager.TimeoutSilently">
            <summary>
            Whether to redirect timeout errors into Verbose channel
            </summary>
        </member>
        <member name="F:ECommons.Automation.TaskManager.ShowDebug">
            <summary>
            Whether to output debug information into PluginLog
            </summary>
        </member>
        <member name="M:ECommons.Automation.TaskManager.#ctor">
            <summary>
            Initializes new instance of <see cref="T:ECommons.Automation.TaskManager"/>.
            </summary>
        </member>
        <member name="M:ECommons.Automation.TaskManager.SetStepMode(System.Boolean)">
            <summary>
            Sets step mode, when enabled task manager won't execute tasks automatically and will wait for Step command from you.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Step">
            <summary>
            Manually execute task manager cycle.
            </summary>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Dispose">
            <summary>
            Disposes task manager, stopping all tasks immediately.
            </summary>
        </member>
        <member name="P:ECommons.Automation.TaskManager.IsBusy">
            <summary>
            Whether TaskManager is currently executing a task.
            </summary>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.Int32,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Func{System.Nullable{System.Boolean}},System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Action,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Action,System.Int32,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Action,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Enqueue(System.Action,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.DelayNext(System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of main queue.
            </summary>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.DelayNext(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of main queue.
            </summary>
            <param name="uniqueName"></param>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.Int32,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Func{System.Nullable{System.Boolean}},System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Action,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Action,System.Int32,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Action,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.EnqueueImmediate(System.Action,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a task into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="task"></param>
            <param name="timeLimitMs"></param>
            <param name="abortOnTimeout"></param>
            <param name="name"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.DelayNextImmediate(System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.DelayNextImmediate(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a set delay into the end of immediate queue. Whenever immediate queue is present, tasks from it will be executed before returning to the main queue.
            </summary>
            <param name="uniqueName"></param>
            <param name="delayMS"></param>
            <param name="useFrameThrottler"></param>
        </member>
        <member name="M:ECommons.Automation.TaskManager.Insert(System.Func{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Adds a task into the start of the main queue.
            </summary>
            <param name="task"></param>
            <param name="name"></param>
        </member>
        <member name="T:ECommons.CircularBuffers.CircularBuffer`1">
            <inheritdoc/>
            <summary>
            Circular buffer.
            
            When writing to a full buffer:
            PushBack -> removes this[0] / Front()
            PushFront -> removes this[Size-1] / Back()
            
            this implementation is inspired by
            http://www.boost.org/doc/libs/1_53_0/libs/circular_buffer/doc/circular_buffer.html
            because I liked their interface.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._start">
            <summary>
            The _start. Index of the first element in buffer.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._end">
            <summary>
            The _end. Index after the last element in the buffer.
            </summary>
        </member>
        <member name="F:ECommons.CircularBuffers.CircularBuffer`1._size">
            <summary>
            The _size. Buffer size.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.CircularBuffers.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.CircularBuffers.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
            <param name='items'>
            Items to fill buffer with. Items length must be less than capacity.
            Suggestion: use Skip(x).Take(y).ToArray() to build this argument from
            any enumerable.
            </param>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Capacity">
            <summary>
            Maximum capacity of the buffer. Elements pushed into the buffer after
            maximum capacity is reached (IsFull = true), will remove an element.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.IsFull">
            <summary>
            Boolean indicating if Circular is at full capacity.
            Adding more elements when the buffer is full will
            cause elements to be removed from the other end
            of the buffer.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.IsEmpty">
            <summary>
            True if has no elements.
            </summary>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Size">
            <summary>
            Current buffer size (the number of elements that the buffer has).
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Front">
            <summary>
            Element at the front of the buffer - this[0].
            </summary>
            <returns>The value of the element of type T at the front of the buffer.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Back">
            <summary>
            Element at the back of the buffer - this[Size - 1].
            </summary>
            <returns>The value of the element of type T at the back of the buffer.</returns>
        </member>
        <member name="P:ECommons.CircularBuffers.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Index access to elements in buffer.
            Index does not loop around like when adding elements,
            valid interval is [0;Size[
            </summary>
            <param name="index">Index of element to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is outside of [; Size[ interval.</exception>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PushBack(`0)">
            <summary>
            Pushes a new element to the back of the buffer. Back()/this[Size-1]
            will now return this element.
            
            When the buffer is full, the element at Front()/this[0] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the back of the buffer</param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PushFront(`0)">
            <summary>
            Pushes a new element to the front of the buffer. Front()/this[0]
            will now return this element.
            
            When the buffer is full, the element at Back()/this[Size-1] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the front of the buffer</param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PopBack">
            <summary>
            Removes the element at the back of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.PopFront">
            <summary>
            Removes the element at the front of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Clear">
            <summary>
            Clears the contents of the array. Size = 0, Capacity is unchanged.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal 
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.ToArraySegments">
             <summary>
             Get the contents of the buffer as 2 ArraySegments.
             Respects the logical contents of the buffer, where
             each segment and items in each segment are ordered
             according to insertion.
            
             Fast: does not copy the array elements.
             Useful for methods like <c>Send(IList&lt;ArraySegment&lt;Byte&gt;&gt;)</c>.
             
             <remarks>Segments may be empty.</remarks>
             </summary>
             <returns>An IList with 2 segments corresponding to the buffer content.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this buffer.
            </summary>
            <returns>An enumerator that can be used to iterate this collection.</returns>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Increment(System.Int32@)">
            <summary>
            Increments the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.Decrement(System.Int32@)">
            <summary>
            Decrements the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ECommons.CircularBuffers.CircularBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts the index in the argument to an index in <code>_buffer</code>
            </summary>
            <returns>
            The transformed index.
            </returns>
            <param name='index'>
            External index.
            </param>
        </member>
        <member name="M:ECommons.Commands.CmdAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="helpMessage"></param>
            <param name="showInHelp"></param>
            <param name="showInHelpPanel">Whether show the major command help on the <seealso cref="T:ImGuiNET.ImGui"/> window</param>
        </member>
        <member name="M:ECommons.Commands.CmdManager.DrawHelp(System.Single)">
            <summary>
            Draw the help panel into the <seealso cref="T:ImGuiNET.ImGui"/> window.
            </summary>
            <param name="indent">The indent of value. 0 means no index, -1 means next line.</param>
        </member>
        <member name="T:ECommons.Configuration.DefaultSerializationFactory">
            <summary>
            Extend this class and override existing methods to create your own serialization factory.
            </summary>
        </member>
        <member name="M:ECommons.Configuration.DefaultSerializationFactory.Deserialize``1(System.String)">
            <summary>
            Deserialization method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Configuration.DefaultSerializationFactory.Serialize(System.Object,System.Boolean)">
            <summary>
            Serialization method
            </summary>
            <param name="config"></param>
            <param name="prettyPrint">A parameter that informs serializar that pretty-print should be used, if possible.</param>
            <returns></returns>
        </member>
        <member name="T:ECommons.Configuration.EzConfig">
            <summary>
            A class that aims to significantly simplify working with Dalamud configuration.
            1. Does not includes type definitions, which allows changing underlying type if it can be deserialized from existing data (list into array...)
            2. Provides anti-corruption mechanism, reducing chance of data loss if game crashes or power goes off during configuration writing
            3. Allows to very easily load default configuration as well as additional configuration, taking path to config folder into account.
            4. Allows you to redefine serializer with your own implementation upon serializing or in general for the whole EzConfig module.
            5. Solves the issues with default Dalamud serialization settings where default values of collection will stay in addition to ones that were deserialized.
            </summary>
        </member>
        <member name="P:ECommons.Configuration.EzConfig.DefaultConfigurationFileName">
            <summary>
            Full path to default configuration file.
            </summary>
        </member>
        <member name="P:ECommons.Configuration.EzConfig.Config">
            <summary>
            Default configuration reference
            </summary>
        </member>
        <member name="P:ECommons.Configuration.EzConfig.DefaultSerializationFactory">
            <summary>
            Default serialization factory. Create a class that extends SerializationFactory, implement your own serializer and deserializer and assign DefaultSerializationFactory to it before loading any configurations to change serializer to your own liking.
            </summary>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.Init``1">
            <summary>
            Loads and returns default configuration file
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.Migrate``1">
            <summary>
            Migrates old default configuration to EzConfig, if applicable. Must be called before Init.
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.Save">
            <summary>
            Saves default configuration file, if applicable. 
            </summary>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.SaveConfiguration(ECommons.Configuration.IEzConfig,System.String,System.Boolean,System.Boolean,ECommons.Configuration.ISerializationFactory,System.Boolean)">
            <summary>
            Saves arbitrary configuration file.
            </summary>
            <param name="Configuration">Configuration instance</param>
            <param name="path">Path to save to</param>
            <param name="prettyPrint">Inform serializer that you want pretty-print your configuration</param>
            <param name="appendConfigDirectory">If true, plugin configuration directory will be added to path</param>
            <param name="serializationFactory">If null, then default factory will be used.</param>
            <param name="writeFileAsync">Whether to perform writing operation in a separate thread. Serialization is performed in current thread.</param>
        </member>
        <member name="M:ECommons.Configuration.EzConfig.LoadConfiguration``1(System.String,System.Boolean,ECommons.Configuration.ISerializationFactory)">
            <summary>
            Loads arbitrary configuration file or creates an empty one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Where to load it from.</param>
            <param name="appendConfigDirectory">If true, plugin configuration directory will be added to path</param>
            <param name="serializationFactory">If null, then default factory will be used.</param>
            <returns></returns>
        </member>
        <member name="T:ECommons.ExcelResolver`1">
            <summary>
            This object resolves a rowID within an Excel sheet.
            </summary>
            <typeparam name="T">The type of Lumina sheet to resolve.</typeparam>
        </member>
        <member name="M:ECommons.ExcelResolver`1.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ECommons.ExcelResolver`1"/> class.
            </summary>
            <param name="id">The ID of the classJob.</param>
        </member>
        <member name="P:ECommons.ExcelResolver`1.Id">
            <summary>
            Gets the ID to be resolved.
            </summary>
        </member>
        <member name="P:ECommons.ExcelResolver`1.GameData">
            <summary>
            Gets GameData linked to this excel row.
            </summary>
        </member>
        <member name="M:ECommons.ExcelResolver`1.GetWithLanguage(Dalamud.ClientLanguage)">
            <summary>
            Gets GameData linked to this excel row with the specified language.
            </summary>
            <param name="language">The language.</param>
            <returns>The ExcelRow in the specified language.</returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelTerritoryHelper.IsSanctuary(System.UInt32)">
            <summary>
            Checks if territory belongs to main cities, inns, residential areas or houses. 
            </summary>
            <param name="territoryType"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ExcelServices.ExcelTerritoryHelper.GetName(System.UInt32,System.Boolean)">
            <summary>
            Gets fancy name for a territory.
            </summary>
            <param name="TerritoryType">Zone ID</param>
            <param name="includeID">Whether to include an ID into name</param>
            <returns>Content finder condition if exists; otherwise - zone name if exists; otherwise - zone ID as a string</returns>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ADV">
            <summary>
            Adventurer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.GLA">
            <summary>
            Gladiator 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.PGL">
            <summary>
            Pugilist 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MRD">
            <summary>
            Marauder 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.LNC">
            <summary>
            Lancer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ARC">
            <summary>
            Archer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.CNJ">
            <summary>
            Conjurer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.THM">
            <summary>
            Thaumaturge
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.CRP">
            <summary>
            Carpenter
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BSM">
            <summary>
            Blacksmith
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ARM">
            <summary>
            Armorer
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.GSM">
            <summary>
            Goldsmith
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.LTW">
            <summary>
            Leatherworker
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.WVR">
            <summary>
            Weaver
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ALC">
            <summary>
            Alchemist
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.CUL">
            <summary>
            Culinarian
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MIN">
            <summary>
            Miner
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BTN">
            <summary>
            Botanist
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.FSH">
            <summary>
            Fisher
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.PLD">
            <summary>
            Paladin 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MNK">
            <summary>
            Monk 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.WAR">
            <summary>
            Warrior 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.DRG">
            <summary>
            Dragoon 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BRD">
            <summary>
            Bard 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.WHM">
            <summary>
            WhiteMage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BLM">
            <summary>
            BlackMage
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ACN">
            <summary>
            Arcanist 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SMN">
            <summary>
            Summoner 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SCH">
            <summary>
            Scholar 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.ROG">
            <summary>
            Rogue 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.NIN">
            <summary>
            Ninja 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.MCH">
            <summary>
            Machinist 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.DRK">
            <summary>
            DarkKnight 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.AST">
            <summary>
            Astrologian 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SAM">
            <summary>
            Samurai 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.RDM">
            <summary>
            RedMage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.BLU">
            <summary>
            BlueMage 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.GNB">
            <summary>
            Gunbreaker 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.DNC">
            <summary>
            Dancer 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.RPR">
            <summary>
            Reaper 
            </summary>
        </member>
        <member name="F:ECommons.ExcelServices.Job.SGE">
            <summary>
            Sage 
            </summary>
        </member>
        <member name="T:ECommons.EzEventManager.EzFrameworkUpdate">
            <summary>
            Provides wrapped access to Framework.Update event. Disposed automatically upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
        </member>
        <member name="T:ECommons.EzEventManager.EzLogout">
            <summary>
            Provides wrapped access to ClientState.Logout event. Disposed automatically upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
        </member>
        <member name="T:ECommons.EzEventManager.EzTerritoryChanged">
            <summary>
            Provides wrapped access to Framework.Update event. Disposed automatically upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
        </member>
        <member name="T:ECommons.EzHookManager.EzHook`1">
            <summary>
            A wrapper around Dalamud hook. Achieves 2 goals:
            - Auto-disposing all undisposed hooks upon plugin unload;
            - Lazy hooking and completely disposing hook upon disabling;
            - Increasing transparency to developer, indicating that Dalamud's disable method doesn't completely disables it and just pauses detour execution.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ECommons.EzHookManager.EzHook`1.Delegate">
            <summary>
            Delegate that points to provided address which you can call even without enabling your hook. 
            </summary>
        </member>
        <member name="M:ECommons.EzHookManager.EzHook`1.Disable">
            <summary>
            Disabling EzHook disposes underlying hook. 
            </summary>
        </member>
        <member name="P:ECommons.EzHookManager.EzHook`1.Original">
            <summary>
            Calls original function as if it was unhooked if hook is enabled; calls original Delegate if hook is disabled.
            </summary>
        </member>
        <member name="T:ECommons.EzIpcManager.EzIPC">
            <summary>
            Provides easier way to interact with Dalamud IPC.<br></br>
            See EzIPC.md for example use.
            </summary>
        </member>
        <member name="E:ECommons.EzIpcManager.EzIPC.OnSafeInvocationException">
            <summary>
            Event that fires whenever an exception occurs in any of safe invocation wrapper methods.
            </summary>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.Init(System.Object,System.String,ECommons.EzIpcManager.SafeWrapper)">
            <summary>
            Initializes IPC provider and subscriber for an instance type. Static methods or field/properties/properties will be ignored, register them separately via static Init if you must.<br></br>
            Each method that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> or <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be registered for IPC under "Prefix.IPCName" tag. If prefix is not specified, it is your plugin's internal name. If IPCName is not specified, it is method name.<br></br>
            Each Action and Function field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> will be assigned delegate that represents respective GetIPCSubscriber. Each Action field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be assigned to become respective tag's event trigger. Make sure to explicitly specify prefix if you're interacting with other plugin's IPC.<br></br>
            You do not need to dispose IPC methods in any way. Everything is disposed upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
            <param name="instance">Instance of a class that has EzIPC methods and field/properties/properties.</param>
            <param name="prefix">Name prefix</param>
            <param name="safeWrapper">Type of a safe invocation wrapper to be used for IPC calls. Wrappers, when used, will silently drop exceptions and return default object if invocation has failed. You can subscribe to <see cref="E:ECommons.EzIpcManager.EzIPC.OnSafeInvocationException"/> event to observe these exceptions.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>Array of disposal tokens that can be used to dispose registered providers and event subscription. <b>Typical use of EzIPC never has any need to store and deal with these tokens</b>; you only ever need them when you want to unregister IPC before your plugin's Dispose method is called.</returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.Init(System.Type,System.String,ECommons.EzIpcManager.SafeWrapper)">
            <summary>
            Initializes IPC provider and subscriber for a static type.<br></br>
            Each method that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> or <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be registered for IPC under "Prefix.IPCName" tag. If prefix is not specified, it is your plugin's internal name. If IPCName is not specified, it is method name.<br></br>
            Each Action and Function field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/> will be assigned delegate that represents respective GetIPCSubscriber. Each Action field/property that have <see cref="T:ECommons.EzIpcManager.EzIPCEventAttribute"/> will be assigned to become respective tag's event trigger. Make sure to explicitly specify prefix if you're interacting with other plugin's IPC.<br></br>
            You do not need to dispose IPC methods in any way. Everything is disposed upon calling <see cref="M:ECommons.ECommonsMain.Dispose"/>.
            </summary>
            <param name="staticType">Type of a static class that has EzIPC methods and field/properties/properties.</param>
            <param name="prefix">Name prefix</param>
            <param name="safeWrapper">Type of a safe invocation wrapper to be used for IPC calls. Wrappers, when used, will silently drop exceptions and return default object if invocation has failed. You can subscribe to <see cref="E:ECommons.EzIpcManager.EzIPC.OnSafeInvocationException"/> event to observe these exceptions.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>Array of disposal tokens that can be used to dispose registered providers and event subscription. <b>Typical use of EzIPC never has any need to store and deal with these tokens</b>; you only ever need them when you want to unregister IPC before your plugin's Dispose method is called.</returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.FindIpcProvider(System.Int32)">
            <summary>
            Searches for IPC provider function with specified number of generic arguments
            </summary>
            <param name="numGenericArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPC.FindIpcSubscriber(System.Int32)">
            <summary>
            Searches for IPC subscriber function with specified number of generic arguments
            </summary>
            <param name="numGenericArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCAttribute.#ctor(System.String,System.Boolean,System.Type,ECommons.EzIpcManager.SafeWrapper)">
            <summary>
            Initializes <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/>.
            </summary>
            <param name="iPCName">IPC method name.</param>
            <param name="applyPrefix">Whether to apply prefix before name or not.</param>
            <param name="actionLastGenericType">Dummy return type used as a last generic argument for actions. When omitted, typeof(object) is used.</param>
            <param name="wrapper">Wrapper type</param>
        </member>
        <member name="T:ECommons.EzIpcManager.EzIPCDisposalToken">
            <summary>
            Represents EzIPC token, which can be used to manually dispose IPC when you want fine-grained control over disposing IPC. Any undisposed tokens are disposed during ECommonsMain's dispose so <b>you do not need to manually dispose tokens</b>.
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.EzIPCDisposalToken.IpcTag">
            <summary>
            Full IPC tag
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.EzIPCDisposalToken.IsEvent">
            <summary>
            Whether the token is event subscription
            </summary>
        </member>
        <member name="P:ECommons.EzIpcManager.EzIPCDisposalToken.IsDisposed">
            <summary>
            Whether the token was already disposed
            </summary>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCDisposalToken.Dispose">
            <summary>
            Disposes token, unregistering IPC provider or event subscription, if not already disposed.<br></br>
            <b>You do not need to call this method unless you specifically want to unregister your IPC before plugin unloads.</b>
            </summary>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCEventAttribute.#ctor(System.String,System.Boolean,System.Type)">
            <summary>
            Initializes <see cref="T:ECommons.EzIpcManager.EzIPCAttribute"/>.
            </summary>
            <param name="iPCName">IPC method name.</param>
            <param name="applyPrefix">Whether to apply prefix before name or not.</param>
            /// <param name="actionLastGenericType">Dummy return type used as a last generic argument for actions. When omitted, typeof(object) is used.</param>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``1(System.Action{``0},``0)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke(System.Action)">
            <summary>
            Tries to invoke previously obtained action delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``4(System.Func{``0,``1,``2,``3},``0,``1,``2,``3@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``3(System.Func{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``2(System.Func{``0,``1},``0,``1@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="M:ECommons.EzIpcManager.EzIPCExtensions.TryInvoke``1(System.Func{``0},``0@)">
            <summary>
            Tries to invoke previously obtained function delegate via <see cref="T:ECommons.EzIpcManager.EzIPC"/> safely. Does not throws <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/>.
            </summary>
            <param name="ret">Result returned by a function if invocation succeeded</param>
            <returns>Whether invocation did not throw <see cref="T:Dalamud.Plugin.Ipc.Exceptions.IpcNotReadyError"/></returns>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.None">
            <summary>
            Directly call IPC, don't use any wrapper
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.IPCException">
            <summary>
            Only catch and discard IPCException
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.AnyException">
            <summary>
            Catch and discard all exceptions
            </summary>
        </member>
        <member name="F:ECommons.EzIpcManager.SafeWrapper.Inherit">
            <summary>
            Inherit default setting from <see cref="M:ECommons.EzIpcManager.EzIPC.Init(System.Object,System.String,ECommons.EzIpcManager.SafeWrapper)"/> call
            </summary>
        </member>
        <member name="T:ECommons.EzSharedDataManager.EzSharedData">
            <summary>
            EzSharedData class aims to resolve following problems with built-in SharedData service.
            - It will automatically relinquish data upon plugin disposal, unless specifically instructed otherwise
            - You can use TryGet continuously and there will ever be only one usage instance, you do not have to worry about holding reference yourself. Although, this is slower than creating and holding reference yourself so please obtain and hold reference to the data in performance-critical functions such as Framework Update.
            </summary>
        </member>
        <member name="M:ECommons.EzSharedDataManager.EzSharedData.TryGet``1(System.String,``0@,ECommons.EzSharedDataManager.CreationMode,``0)">
            <summary>
            Attempts to get existing data or create new data.
            </summary>
            <typeparam name="T">Data type. Note that only reference type works. If you need to use value type, use array and put one element there. Only .NET, Dalamud and Dalamud's libraries types; no submodules, nuget packages and your own custom-defined types. If you need to share complex structure, please use tuples and Alias any type feature https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-12.0/using-alias-types</typeparam>
            <param name="Name">Shared data name. Please prefix it with your plugin's name.</param>
            <param name="Data">Obtained reference.</param>
            <param name="Mode">Creation mode, if any is needed.</param>
            <param name="DefaultValue">Default value when creating data that doesn't exists.</param>
            <returns>Whether data could be obtained</returns>
        </member>
        <member name="F:ECommons.Gamepad.GamePad.ControllerButtons">
            <summary>
            Dictionary containing a mapping of <see cref="T:Dalamud.Game.ClientState.GamePad.GamepadButtons"/> to Playstation / Xbox button names.
            </summary>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsControllerEnabled">
            <summary>
            Gets the "Enable gamepad" option from FFXIV to indicate if the gamepad has been enabled in FFXIV.
            </summary>
            <returns>FFXIV is using a controller.</returns>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsButtonPressed(Dalamud.Game.ClientState.GamePad.GamepadButtons)">
            <summary>
            Checks if a controller button has been pressed. Only true on the first frame it has been pressed.
            </summary>
            <param name="button">Button to check.</param>
            <returns>Button has just been pressed.</returns>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsButtonHeld(Dalamud.Game.ClientState.GamePad.GamepadButtons)">
            <summary>
            Checks if a controller button is currently held. Returns true for every frame it's held down.
            </summary>
            <param name="button">Button to check.</param>
            <returns>Button is being held down.</returns>
        </member>
        <member name="M:ECommons.Gamepad.GamePad.IsButtonJustReleased(Dalamud.Game.ClientState.GamePad.GamepadButtons)">
            <summary>
            Checks if a controller button has just been released. Only true on the first frame after releasing.
            </summary>
            <param name="button">Button to check.</param>
            <returns>Button has just been released.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SafeSelect``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Safely selects an entry of the list at a specified index, returning default value if index is out of range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.SafeSelect``1(``0[],System.Int32)">
            <summary>
            Safely selects an entry of the array at a specified index, returning default value if index is out of range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryParseByteArray(System.String,System.Byte[]@,System.Char)">
            <summary>
            Attempts to parse byte array string separated by specified character.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetCallStackID(System.Int32)">
            <summary>
            Retrieves entries from call stack in a form of single string.
            </summary>
            <param name="maxFrames"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Copy(System.String,System.Boolean)">
            <summary>
            Copies text into user's clipboard using WinForms. Does not throws exceptions.
            </summary>
            <param name="text">Text to copy</param>
            <param name="silent">Whether to display success/failure popup</param>
            <returns>Whether operation succeeded</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Paste(System.Boolean)">
            <summary>
            Reads text from user's clipboard
            </summary>
            <param name="silent">Whether to display popup when error occurs.</param>
            <returns>Contents of the clipboard; null if clipboard couldn't be read.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ToHexString(System.Collections.Generic.IEnumerable{System.Byte},System.Char)">
            <summary>
            Converts byte array to hex string where bytes are separated by a specified character
            </summary>
            <param name="bytes"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryDequeue``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Treats list as a queue, removing and returning element at index 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Dequeue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Treats list as a queue, removing and returning element at index 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ECommons.GenericHelpers.DequeueOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Treats list as a queue, removing and returning element at index 0 or default value if there's nothing to dequeue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="List"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.DequeueOrDefault``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Dequeues element from queue or returns default value if there's nothing to dequeue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Queue"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Searches index of first element in IEnumerable that matches the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.NullWhenFalse(System.String,System.Boolean)">
            <summary>
            Returns <paramref name="s"/> when <paramref name="b"/> is <see langword="true"/>, <see langword="null"/> otherwise
            </summary>
            <param name="s"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.AsUInt32(System.Single)">
            <summary>
            Returns <see cref="T:System.UInt32"/> representation of <see cref="T:System.Single"/>.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.AsFloat(System.UInt32)">
            <summary>
            Converts <see cref="T:System.UInt32"/> representation of <see cref="T:System.Single"/> into <see cref="T:System.Single"/>.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Add``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Tries to add multiple items to collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection</param>
            <param name="values">Items</param>
        </member>
        <member name="M:ECommons.GenericHelpers.Remove``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Tries to remove multiple items to collection. In case if few of the same values are present in the collection, only first will be removed.
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection</param>
            <param name="values">Items</param>
        </member>
        <member name="F:ECommons.GenericHelpers.UseAsyncKeyCheck">
            <summary>
            Sets whether <see cref="M:PInvoke.User32.GetKeyState(System.Int32)"/> or <see cref="M:PInvoke.User32.GetAsyncKeyState(System.Int32)"/> will be used when calling <see cref="M:ECommons.GenericHelpers.IsKeyPressed(System.Windows.Forms.Keys)"/> or <see cref="M:ECommons.GenericHelpers.IsKeyPressed(ECommons.Interop.LimitedKeys)"/>
            </summary>
        </member>
        <member name="M:ECommons.GenericHelpers.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Checks if a key is pressed via winapi.
            </summary>
            <param name="key">Key</param>
            <returns>Whether the key is currently pressed</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsKeyPressed(ECommons.Interop.LimitedKeys)">
            <summary>
            Checks if a key is pressed via winapi.
            </summary>
            <param name="key">Key</param>
            <returns>Whether the key is currently pressed</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsTarget(Dalamud.Game.ClientState.Objects.Types.GameObject)">
            <summary>
            Checks if you are targeting object <paramref name="obj"/>.
            </summary>
            <param name="obj">Object to check</param>
            <returns>Whether you are targeting object <paramref name="obj"/>; <see langword="false"/> if <paramref name="obj"/> is <see langword="null"/></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.JSONClone``1(``0)">
            <summary>
            Serializes and then deserializes object, returning result of deserialization using <see cref="N:Newtonsoft.Json"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns>Deserialized copy of <paramref name="obj"/></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ParseInt(System.String)">
            <summary>
            Attempts to parse integer
            </summary>
            <param name="number">Input string</param>
            <returns>Integer if parsing was successful, <see langword="null"/> if failed</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Retrieves a value from dictionary, adding it first if it doesn't exists yet.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes action for each element of collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="function"></param>
        </member>
        <member name="M:ECommons.GenericHelpers.TryDecodeSender(Dalamud.Game.Text.SeStringHandling.SeString,ECommons.ChatMethods.Sender@)">
            <summary>
            Attempts to parse player in a <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>. 
            </summary>
            <param name="sender"><see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/> from which to read player</param>
            <param name="senderStruct">Resulting player data</param>
            <returns>Whether operation succeeded</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ExtractText(Lumina.Text.SeString,System.Boolean)">
            <summary>
            Discards any non-text payloads from <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>
            </summary>
            <param name="s"></param>
            <param name="onlyFirst">Whether to find first text payload and only return it</param>
            <returns>String that only includes text payloads</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ExtractText(FFXIVClientStructs.FFXIV.Client.System.String.Utf8String,System.Boolean)">
            <summary>
            Reads SeString from unmanaged memory and discards any non-text payloads from <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>
            </summary>
            <param name="s"></param>
            <param name="onlyFirst">Whether to find first text payload and only return it</param>
            <returns>String that only includes text payloads</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.ExtractText(Dalamud.Game.Text.SeStringHandling.SeString,System.Boolean)">
            <summary>
            Discards any non-text payloads from <see cref="T:Dalamud.Game.Text.SeStringHandling.SeString"/>
            </summary>
            <param name="seStr"></param>
            <param name="onlyFirst">Whether to find first text payload and only return it</param>
            <returns>String that only includes text payloads</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.Toggle``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Adds <paramref name="value"/> into HashSet if it doesn't exists yet or removes if it exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hashSet"></param>
            <param name="value"></param>
            <returns>Whether <paramref name="hashSet"/> contains <paramref name="value"/> after function has been executed.</returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Attempts to get first element of <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to get first element of IEnumerable
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate">Function to test elements.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetLast``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to get last element of <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate">Function to test elements.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.TryGetAddonByName``1(System.String,``0*@)">
            <summary>
            Attempts to get first instance of addon by name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Addon"></param>
            <param name="AddonPtr"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.GenericHelpers.IsSelectItemEnabled(FFXIVClientStructs.FFXIV.Component.GUI.AtkTextNode*)">
            <summary>
            Attempts to find out whether SelectString entry is enabled based on text color. 
            </summary>
            <param name="textNodePtr"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Hooks.ActionEffect.Init(System.Action{System.UInt32,System.UInt16,ECommons.Hooks.ActionEffectTypes.ActionEffectType,System.UInt32,System.UInt64,System.UInt32},System.Boolean)">
            <summary>
            
            </summary>
            <param name="fullParamsCallback">uint ActionID, ushort animationID, ActionEffectType type, uint sourceID, ulong targetOID, uint damage</param>
            <param name="logging"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:ECommons.Hooks.ActionEffectTypes.TargetEffect.Item(System.Int32)">
            <summary>
            Get Effect.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ECommons.ImGuiMethods.EColor">
            <summary>
            A set of fancy color for use in plugins. You can redefine them after calling ECommonsMain.Init to match necessary style!
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.Action)">
            <summary>
            Draws a line on the right side of the window. Without specifying ID explicitly, you may only draw one line per unique action.
            </summary>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.Action,System.Single@)">
            <summary>
            Draws a line on the right side of the window. Without specifying ID explicitly, you may only draw one line per unique action.
            </summary>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
            <param name="width">Calculated width of your line.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.String,System.Action)">
            <summary>
            Draws a line on the right side of the window.
            </summary>
            <param name="id">Unique ID of a line.</param>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RightFloat(System.String,System.Action,System.Single@,System.Nullable{System.Single})">
            <summary>
            Draws a line on the right side of the window.
            </summary>
            <param name="id">Unique ID of a line.</param>
            <param name="drawAction">Line draw action. You can only use one line in one action.</param>
            <param name="width">Calculated width of your line.</param>
            <param name="contentRegionAvailX">Override content region avail if needed</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.InputWithRightButtonsArea(System.String,System.Action,System.Action)">
            <summary>
            Convenient way to display stretched input with button or other elements on it's right side.
            </summary>
            <param name="id">Unique ID</param>
            <param name="inputAction">A single element that accepts transformation by ImGui.SetNextItemWidth method</param>
            <param name="rightAction">A line of elements on the right side. Can contain multiple elements but only one line.</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CheckboxBullet(System.String,System.Boolean@)">
            <summary>
            <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/> that has bullet marker instead of normal check mark when enabled.
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CheckboxInverted(System.String,System.Boolean@)">
            <summary>
            Inverted <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/>
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Checkbox(System.String,System.Int32@)">
            <summary>
            <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/> that accepts int as a bool. 0 is false, 1 is true.
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Checkbox(System.String,System.Nullable{System.Boolean}@)">
            <summary>
            Tri-way <see cref="M:ImGuiNET.ImGui.Checkbox(System.String,System.Boolean@)"/>. Null will be displayed as a bullet. Switching order: false -> null -> true.
            </summary>
            <param name="label"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CollectionCheckbox``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0},System.Boolean,System.Boolean)">
            <summary>
            Checkbox that adds/removes a set of values from the collection. Displays check mark when element is present in a collection, and doesn't displays checkmark when element is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="label"></param>
            <param name="values">A set of values to add/remove</param>
            <param name="collection">A collection that will be modified</param>
            <param name="inverted">Whether to invert checkbox. Not implemented.</param>
            <param name="delayedOperation">When set to true, will schedule the change in next framework update. Useful when you want to modify a collection while iterating over it.</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.CollectionCheckbox``1(System.String,``0,System.Collections.Generic.ICollection{``0},System.Boolean,System.Boolean)">
            <summary>
            Checkbox that adds/removes a value from the collection. Displays check mark when element is present in a collection, and doesn't displays checkmark when element is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="label"></param>
            <param name="value">A value to add/remove</param>
            <param name="collection">A collection that will be modified</param>
            <param name="inverted">Whether to invert checkbox.</param>
            <param name="delayedOperation">When set to true, will schedule the change in next framework update. Useful when you want to modify a collection while iterating over it.</param>
            <returns></returns>
        </member>
        <member name="F:ECommons.ImGuiMethods.ImGuiEx.JobSelectorOption.IncludeBase">
            <summary>
            With this option, base jobs will be included as well.
            </summary>
        </member>
        <member name="F:ECommons.ImGuiMethods.ImGuiEx.JobSelectorOption.ClearFilterOnOpen">
            <summary>
            Whether to clear filter when user opens job selection menu.
            </summary>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.JobSelector(System.String,System.Collections.Generic.ICollection{ECommons.ExcelServices.Job},ECommons.ImGuiMethods.ImGuiEx.JobSelectorOption[],System.Int32,System.String,System.Func{ECommons.ExcelServices.Job,System.Boolean})">
            <summary>
            ImGui combo that opens up into a multiple job selector with icons and search field.
            </summary>
            <param name="id">Standard ID that will be passed directly to the combo.</param>
            <param name="selectedJobs">A collection where selected jobs will be written.</param>
            <param name="options">An array of extra options, if desired.</param>
            <param name="maxPreviewJobs">How much jobs maximum will be visible on a preview before it will just display amount.</param>
            <param name="noJobSelectedPreview">Preview value that should be displayed when no job is selected.</param>
            <param name="jobDisplayFilter">Optional extra filter for jobs to be displayed.</param>
            <returns><see langword="true"/> every time <paramref name="selectedJobs"/> is modified.</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Nullable{System.Boolean}@,System.Nullable{System.Numerics.Vector4},System.Nullable{System.Numerics.Vector4},System.Boolean)">
            <summary>
            Provides a button that can be used to switch <see langword="bool"/>? variables. Left click - to toggle between <see langword="true"/> and <see langword="null"/>, right click - to toggle between <see langword="false"/> and <see langword="null"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="TrueColor">Color when <paramref name="value"/> is true</param>
            <param name="FalseColor">Color when <paramref name="value"/> is false</param>
            <param name="smallButton">Whether a button should be small</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Vector4FromRGB(System.UInt32,System.Single)">
            <summary>
            Converts RGB color to <see cref="T:System.Numerics.Vector4"/> for ImGui
            </summary>
            <param name="col">Color in format 0xRRGGBB</param>
            <param name="alpha">Optional transparency value between 0 and 1</param>
            <returns>Color in <see cref="T:System.Numerics.Vector4"/> format ready to be used with <see cref="T:ImGuiNET.ImGui"/> functions</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.Vector4FromRGBA(System.UInt32)">
            <summary>
            Converts RGBA color to <see cref="T:System.Numerics.Vector4"/> for ImGui
            </summary>
            <param name="col">Color in format 0xRRGGBBAA</param>
            <returns>Color in <see cref="T:System.Numerics.Vector4"/> format ready to be used with <see cref="T:ImGuiNET.ImGui"/> functions</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Boolean@,System.Boolean)">
            <summary>
            Draws a button that acts like a checkbox.
            </summary>
            <param name="name">Button text</param>
            <param name="value">Value</param>
            <param name="smallButton">Whether button should be small</param>
            <returns>true when clicked, otherwise false</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Boolean@,System.UInt32,System.Boolean)">
            <summary>
            Draws a button that acts like a checkbox.
            </summary>
            <param name="name">Button text</param>
            <param name="value">Value</param>
            <param name="color">Active button color</param>
            <param name="smallButton">Whether button should be small</param>
            <returns>true when clicked, otherwise false</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCheckbox(System.String,System.Boolean@,System.Numerics.Vector4,System.Boolean)">
            <summary>
            Draws a button that acts like a checkbox.
            </summary>
            <param name="name">Button text</param>
            <param name="value">Value</param>
            <param name="color">Active button color</param>
            <param name="smallButton">Whether button should be small</param>
            <returns>true when clicked, otherwise false</returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.RadioButtonBool(System.String,System.String,System.Boolean@,System.Boolean,System.Action,System.Action)">
            <summary>
            Draws two radio buttons for a boolean value.
            </summary>
            <param name="labelTrue">True choice radio button text</param>
            <param name="labelFalse">False choice radio button text</param>
            <param name="value">Value</param>
            <param name="sameLine">Whether to draw radio buttons on the same line</param>
            <param name="prefix">Will be invoked before each radio button draw</param>
            <param name="suffix">Will be invoked after each radio button draw</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.EzTableColumns(System.String,System.Action[],System.Nullable{System.Int32},ImGuiNET.ImGuiTableFlags)">
            <summary>
            Draws equally sized columns without ability to resize
            </summary>
            <param name="id">Unique ImGui ID</param>
            <param name="values">List of actions for each column</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.ButtonCtrl(System.String,System.Nullable{System.Numerics.Vector2},System.String)">
            <summary>
            Button that is disabled unless CTRL key is held
            </summary>
            <param name="text">Button ID</param>
            <param name="size">Optional size of the button, null if size is to be calculated automatically</param>
            <param name="affix">Button affix</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.SliderIntAsFloat(System.String,System.Int32@,System.Int32,System.Int32,System.Single)">
            <summary>
            Displays ImGui.SliderFloat for internal int value.
            </summary>
            <param name="id">ImGui ID</param>
            <param name="value">Integer value</param>
            <param name="min">Minimal value</param>
            <param name="max">Maximum value</param>
            <param name="divider">Value is divided by divider before being presented to user</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextV(System.Nullable{System.Numerics.Vector4},System.String)">
            <summary>
            Aligns text vertically to a standard size button.
            </summary>
            <param name="col">Color</param>
            <param name="s">Text</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.TextV(System.String)">
            <summary>
            Aligns text vertically to a standard size button.
            </summary>
            <param name="s">Text</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.EnumCombo``1(System.String,``0@,System.Collections.Generic.IDictionary{``0,System.String})">
            <summary>
            Draws an easy combo selector for an enum with a search field for long lists.
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="name">ImGui ID</param>
            <param name="refConfigField">Value</param>
            <param name="names">Optional Name overrides</param>
        </member>
        <member name="M:ECommons.ImGuiMethods.ImGuiEx.EnumCombo``1(System.String,``0@,System.Func{``0,System.Boolean},System.Collections.Generic.IDictionary{``0,System.String})">
            <summary>
            Draws an easy combo selector for an enum with a search field for long lists.
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="name">ImGui ID</param>
            <param name="refConfigField">Value</param>
            <param name="filter">Optional filter</param>
            <param name="names">Optional Name overrides</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Interop.WindowFunctions.ApplicationIsActivated">
            <summary>Returns true if the current application has focus, false otherwise</summary>
        </member>
        <member name="T:ECommons.MathHelpers.BitHelper">
            <summary>
            Helpers to perform bit operations on numeric types.
            </summary>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)">
            <summary>
            Checks whether or not a given bit is set.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value.</param>
            <param name="n">The position of the bit to check (in [0, 31] range).</param>
            <returns>Whether or not the n-th bit is set.</returns>
            <remarks>
            This method doesn't validate <paramref name="n"/> against the valid range.
            If the parameter is not valid, the result will just be inconsistent.
            Additionally, no conditional branches are used to retrieve the flag.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Checks whether or not a given bit is set in a given bitwise lookup table.
            This method provides a branchless, register-based (with no memory accesses) way to
            check whether a given value is valid, according to a precomputed lookup table.
            It is similar in behavior to <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)"/>, with the main difference
            being that this method will also validate the input <paramref name="x"/> parameter, and
            will always return <see langword="false"/> if it falls outside of the expected interval.
            Additionally, this method accepts a <paramref name="min"/> parameter, which is used to
            decrement the input parameter <paramref name="x"/> to ensure that the range of accepted
            values fits within the available 32 bits of the lookup table in use.
            For more info on this optimization technique, see <see href="https://egorbo.com/llvm-range-checks.html"/>.
            Here is how the code from the link above would be implemented using this method:
            <code>
            bool IsReservedCharacter(char c)
            {
                return BitHelper.HasLookupFlag(314575237u, c, 36);
            }
            </code>
            The resulted assembly is virtually identical, with the added optimization that the one
            produced by <see cref="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt32,System.Int32,System.Int32)"/> has no conditional branches at all.
            </summary>
            <param name="table">The input lookup table to use.</param>
            <param name="x">The input value to check.</param>
            <param name="min">The minimum accepted value for <paramref name="x"/> (defaults to 0).</param>
            <returns>Whether or not the corresponding flag for <paramref name="x"/> is set in <paramref name="table"/>.</returns>
            <remarks>
            For best results, as shown in the sample code, both <paramref name="table"/> and <paramref name="min"/>
            should be compile-time constants, so that the JIT compiler will be able to produce more efficient code.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasZeroByte(System.UInt32)">
            <summary>
            Checks whether the given value has any bytes that are set to 0.
            That is, given a <see cref="T:System.UInt32"/> value, which has a total of 4 bytes,
            it checks whether any of those have all the bits set to 0.
            </summary>
            <param name="value">The input value to check.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to 0.</returns>
            <remarks>
            This method contains no branches.
            For more background on this subject, see <see href="https://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord"/>.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasZeroByte(System.UInt64)">
            <summary>
            Checks whether the given value has any bytes that are set to 0.
            This method mirrors <see cref="M:ECommons.MathHelpers.BitHelper.HasZeroByte(System.UInt32)"/>, but with <see cref="T:System.UInt64"/> values.
            </summary>
            <param name="value">The input value to check.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to 0.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasByteEqualTo(System.UInt32,System.Byte)">
            <summary>
            Checks whether a byte in the input <see cref="T:System.UInt32"/> value matches a target value.
            </summary>
            <param name="value">The input value to check.</param>
            <param name="target">The target byte to look for.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to <paramref name="target"/>.</returns>
            <remarks>
            This method contains no branches.
            For more info, see <see href="https://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord"/>.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasByteEqualTo(System.UInt64,System.Byte)">
            <summary>
            Checks whether a byte in the input <see cref="T:System.UInt32"/> value matches a target value.
            This method mirrors <see cref="M:ECommons.MathHelpers.BitHelper.HasByteEqualTo(System.UInt32,System.Byte)"/>, but with <see cref="T:System.UInt64"/> values.
            </summary>
            <param name="value">The input value to check.</param>
            <param name="target">The target byte to look for.</param>
            <returns>Whether <paramref name="value"/> has any bytes set to <paramref name="target"/>.</returns>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt32@,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt32"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 31] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 31] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <returns>An <see cref="T:System.UInt32"/> value equal to <paramref name="value"/> except for the <paramref name="n"/>-th bit.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt32,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt32,System.Byte,System.Byte)">
            <summary>
            Extracts a bit field range from a given value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt32"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 31] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <returns>The value of the extracted range within <paramref name="value"/>.</returns>
            <remarks>
            This method doesn't validate <paramref name="start"/> and <paramref name="length"/>.
            If either parameter is not valid, the result will just be inconsistent. The method
            should not be used to set all the bits at once, and it is not guaranteed to work in
            that case, which would just be equivalent to assigning the <see cref="T:System.UInt32"/> value.
            Additionally, no conditional branches are used to retrieve the range.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt32@,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt32"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 31] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt32,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt32,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The initial <see cref="T:System.UInt32"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 31] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <returns>The updated bit field value after setting the specified range.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt32,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt64,System.Int32)">
            <summary>
            Checks whether or not a given bit is set.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value.</param>
            <param name="n">The position of the bit to check (in [0, 63] range).</param>
            <returns>Whether or not the n-th bit is set.</returns>
            <remarks>
            This method doesn't validate <paramref name="n"/> against the valid range.
            If the parameter is not valid, the result will just be inconsistent.
            Additionally, no conditional branches are used to retrieve the flag.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Checks whether or not a given bit is set in a given bitwise lookup table.
            For more info, check the XML docs of the <see cref="M:ECommons.MathHelpers.BitHelper.HasLookupFlag(System.UInt32,System.Int32,System.Int32)"/> overload.
            </summary>
            <param name="table">The input lookup table to use.</param>
            <param name="x">The input value to check.</param>
            <param name="min">The minimum accepted value for <paramref name="x"/> (defaults to 0).</param>
            <returns>Whether or not the corresponding flag for <paramref name="x"/> is set in <paramref name="table"/>.</returns>
            <remarks>
            For best results, as shown in the sample code, both <paramref name="table"/> and <paramref name="min"/>
            should be compile-time constants, so that the JIT compiler will be able to produce more efficient code.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt64@,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt64"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 63] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt64,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetFlag(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Sets a bit to a specified value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value.</param>
            <param name="n">The position of the bit to set or clear (in [0, 63] range).</param>
            <param name="flag">The value to assign to the target bit.</param>
            <returns>An <see cref="T:System.UInt64"/> value equal to <paramref name="value"/> except for the <paramref name="n"/>-th bit.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.HasFlag(System.UInt64,System.Int32)"/>, this method doesn't validate <paramref name="n"/>
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt64,System.Byte,System.Byte)">
            <summary>
            Extracts a bit field range from a given value.
            </summary>
            <param name="value">The input <see cref="T:System.UInt64"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 63] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <returns>The value of the extracted range within <paramref name="value"/>.</returns>
            <remarks>
            This method doesn't validate <paramref name="start"/> and <paramref name="length"/>.
            If either parameter is not valid, the result will just be inconsistent. The method
            should not be used to set all the bits at once, and it is not guaranteed to work in
            that case, which would just be equivalent to assigning the <see cref="T:System.UInt64"/> value.
            Additionally, no conditional branches are used to retrieve the range.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt64@,System.Byte,System.Byte,System.UInt64)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The target <see cref="T:System.UInt64"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 63] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt64,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.MathHelpers.BitHelper.SetRange(System.UInt64,System.Byte,System.Byte,System.UInt64)">
            <summary>
            Sets a bit field range within a target value.
            </summary>
            <param name="value">The initial <see cref="T:System.UInt64"/> value.</param>
            <param name="start">The initial index of the range to extract (in [0, 63] range).</param>
            <param name="length">The length of the range to extract (depends on <paramref name="start"/>).</param>
            <param name="flags">The input flags to insert in the target range.</param>
            <returns>The updated bit field value after setting the specified range.</returns>
            <remarks>
            Just like <see cref="M:ECommons.MathHelpers.BitHelper.ExtractRange(System.UInt64,System.Byte,System.Byte)"/>, this method doesn't validate the parameters
            and does not contain branching instructions, so it's well suited for use in tight loops as well.
            </remarks>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.RegisterOnInstalledPluginsChangedEvents(System.Action[])">
            <summary>
            Registers actions that will be triggered upon any installed plugin state change. Plugin monitoring will begin upon registering any actions.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:ECommons.Reflection.DalamudReflector.TryGetDalamudPlugin(System.String,Dalamud.Plugin.IDalamudPlugin@,System.Runtime.Loader.AssemblyLoadContext@,System.Boolean,System.Boolean)">
            <summary>
            Attempts to retrieve an instance of loaded plugin and it's load context. 
            </summary>
            <param name="internalName">Target plugin's internal name</param>
            <param name="instance">Plugin instance</param>
            <param name="context">Plugin's load context. May be null.</param>
            <param name="suppressErrors">Whether to stay silent on failures</param>
            <param name="ignoreCache">Whether to disable caching of the plugin and it's context to speed up further searches</param>
            <returns>Whether operation succeeded</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:ECommons.Reflection.FieldPropertyUnion.IFieldPropertyUnion">
            <summary>
            Interface that represents union of FieldInfo and PropertyInfo. Allows access to common methods and properties.
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call(System.Object,System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Calls a generic or non-generic method of an instance.
            </summary>
            <param name="instance">Instance containing method</param>
            <param name="methodName">Name of a method to call.</param>
            <param name="methodTypeArguments">Generic argument names. Pass empty array or null if a function is non-generic. Generic types only will be searched within <paramref name="instance"/> assembly.</param>
            <param name="parameters">Parameters to call method with.</param>
            <returns>Object returned by a method.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Calls a generic or non-generic method of an instance.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="assemblies">Assemblies to search types in. Only required if <paramref name="methodTypeArguments"/> is used.</param>
            <param name="methodName">Name of a method to call.</param>
            <param name="methodTypeArguments">Generic argument names. Pass empty array or null if a function is non-generic, otherwise also populate <paramref name="assemblies"/> parameter.</param>
            <param name="parameters">Parameters to call method with.</param>
            <returns>Object returned by a method.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call``1(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Calls a generic or non-generic method of an instance.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="assemblies">Assemblies to search types in. Only required if <paramref name="methodTypeArguments"/> is used.</param>
            <param name="methodName">Name of a method to call.</param>
            <param name="methodTypeArguments">Generic argument names. Pass empty array or null if a function is non-generic, otherwise also populate <paramref name="assemblies"/> parameter.</param>
            <param name="parameters">Parameters to call method with.</param>
            <returns>Object returned by a method.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CallStatic(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Calls a static non-generic method.
            </summary>
            <param name="obj">Object on which assembly to search.</param>
            <param name="type">Fully qualified static class name</param>
            <param name="name">Method's name</param>
            <param name="values">Method's parameters</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CallStatic``1(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Calls a static non-generic method.
            </summary>
            <param name="obj">Object on which assembly to search.</param>
            <param name="type">Fully qualified static class name</param>
            <param name="name">Method's name</param>
            <param name="values">Method's parameters</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CallStatic(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Object[])">
            <summary>
            Ultimate static method calling method.
            </summary>
            <param name="assemblies">Assemblies to search method in.</param>
            <param name="typeName">Fully qualified type name.</param>
            <param name="typeArguments">Type arguments if generic, null otherwise</param>
            <param name="methodName">Static method name.</param>
            <param name="methodTypeArguments">Static method type arguments if generic, null otherwise.</param>
            <param name="parameters">Method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetFoP(System.Object,System.String)">
            <summary>
            Gets field or property of an instance object.
            </summary>
            <param name="obj">Instance containing field/property.</param>
            <param name="name">Name of the field/property</param>
            <returns>Value of a field/property</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetFoP``1(System.Object,System.String)">
            <summary>
            Gets field or property of an instance object.
            </summary>
            <param name="obj">Instance containing field/property.</param>
            <param name="name">Name of the field/property</param>
            <returns>Value of a field/property</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.SetFoP(System.Object,System.String,System.Object)">
            <summary>
            Sets a field or property of an instance object.
            </summary>
            <param name="obj">Instance containing field/property.</param>
            <param name="name">Name of the field/property</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetStaticFoP(System.Object,System.String,System.String)">
            <summary>
            Subject for future refactoring and changes!
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetStaticFoP``1(System.Object,System.String,System.String)">
            <summary>
            Subject for future refactoring and changes!
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.SetStaticFoP(System.Object,System.String,System.String,System.Object)">
            <summary>
            Subject for future refactoring and changes!
            </summary>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Attempts to call a non-generic instance method.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="name">Method's name</param>
            <param name="params">Method's parameters</param>
            <param name="matchExactArgumentTypes">Whether to search for exact method types. Set this to true if you're dealing with ambiguous overloads.</param>
            <returns>Object returned by the target method</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.Call``1(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Attempts to call a non-generic instance method.
            </summary>
            <param name="obj">Instance containing method</param>
            <param name="name">Method's name</param>
            <param name="params">Method's parameters</param>
            <param name="matchExactArgumentTypes">Whether to search for exact method types. Set this to true if you're dealing with ambiguous overloads.</param>
            <returns>Object returned by the target method</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.FindStaticMethodInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,System.Type[],System.String,System.Type[],System.Type[])">
            <summary>
            Searches for a static method in the array of assemblies.
            </summary>
            <param name="assemblies">Assemblies to search in</param>
            <param name="typeName">Fully qualified class name</param>
            <param name="typeArguments">Type arguments, if necessary. Leave as null if type is non-generic.</param>
            <param name="methodName">Static method name</param>
            <param name="methodTypeArguments">Method type arguments, if necessary. Leave as null if method is non-generic.</param>
            <param name="parameterTypes">Method parameters types.</param>
            <returns>MethodInfo of a method that was found or null.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.FindTypesInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches for specified non-generic types in specified assembly list.
            </summary>
            <param name="assemblies">Assemblies to search in</param>
            <param name="typeNames">A list of requested types names</param>
            <returns>A list of requested types. Please check resulting list length to ensure all types were found.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.FindTypesInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Type[]}})">
            <summary>
            Searches for specified generic and non-generic types in specified assembly list.
            </summary>
            <param name="assemblies">Assemblies to search in</param>
            <param name="typeNames">A list of tuples of requested types names and generic argument types. Array of types can be left empty or null to specify that this type is non-generic.</param>
            <returns>A list of requested types. Please check resulting list length to ensure all types were found.</returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.GetTypes(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts array of objects into array of these objects' types.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:ECommons.Reflection.ReflectionHelper.CreateDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates delegate to a method by MethodInfo
            </summary>
            <param name="methodInfo">MethodInfo of a method for which a delegate will be created.</param>
            <param name="target">Instance object that is hosting the method. Pass null if a method is static.</param>
            <returns></returns>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.refX">
            <summary>
            When type is fixed coordinate element: specifies coordinate of that element, otherwise has no effect
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.refY">
            <summary>
            When type is fixed coordinate element: specifies coordinate of that element, otherwise has no effect
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.refZ">
            <summary>
            When type is fixed coordinate element: specifies coordinate of that element, otherwise has no effect
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.offX">
            <summary>
            Specifies offset from targeted object or fixed coordinate
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.offY">
            <summary>
            Specifies offset from targeted object or fixed coordinate
            </summary>
        </member>
        <member name="P:ECommons.SplatoonAPI.Element.offZ">
            <summary>
            Specifies offset from targeted object or fixed coordinate
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.ElementType">
            <summary>
            0: Object at fixed coordinates |
            1: Object relative to actor position | 
            2: Line between two fixed coordinates | 
            3: Line relative to object pos | 
            4: Cone relative to object position |
            5: Cone at fixed coordinates
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.RefActorComparisonType">
            <summary>
            0: Name |
            1: Model ID |
            2: Object ID |
            3: Data ID | 
            4: NPC ID |
            5: Placeholder |
            6: Name ID | 
            7: VFX Path
            </summary>
        </member>
        <member name="T:ECommons.SplatoonAPI.RefActorType">
            0: Game object with specific name |
            1: Self |
            2: Targeted enemy
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.SetOnConnect(System.Action)">
            <summary>
            Executed when connected or reconnected to Splatoon. Create and recreate your elements here. Once this event is fired, all already created elements become invalid.
            </summary>
            <param name="action">Action to be executed on connect</param>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.IsConnected">
            <returns>Whether currently connected to Splatoon</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Int64[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Int64)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Int64)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Single[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElement(System.String,ECommons.SplatoonAPI.Element,System.Single)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Single)">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Single[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyConditionF">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - amount of seconds before element will be destroyed from the moment of it's addition.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.AddDynamicElements(System.String,ECommons.SplatoonAPI.Element[],System.Int64[])">
            <summary>
            Add persistent dynamic element.
            </summary>
            <param name="name">Non-unique namespace of the element</param>
            <param name="e">Element or array of elements</param>
            <param name="DestroyCondition">Destroy condition or array of them where: -2 is destroy on zone change; -1 is destroy on combat end; 0 is never destroy; any other number - system tick at which it should be destroyed, where current system tick can be obtained with Environment.TickCount64 parameter.</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.DisplayOnce(ECommons.SplatoonAPI.Element)">
            <summary>
            Display certain element in next frame only. 
            </summary>
            <param name="e">Element to display</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.RemoveDynamicElements(System.String)">
            <summary>
            Removes dynamic elements with specific name. If more than one element was registered under certain name, all of these elements will be removed.
            </summary>
            <param name="name">Name of element(s)</param>
            <returns>Whether operation was successful</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.DecodeElement(System.String)">
            <summary>
            Attempts to decode element that was encoded into JSON.
            </summary>
            <param name="input">Input string, you can export it from Splatoon. Make sure element is enabled!</param>
            <returns>Element that is ready for use or null if failed</returns>
        </member>
        <member name="M:ECommons.SplatoonAPI.Splatoon.DecodeLayout(System.String)">
            <summary>
            Work in progress on this function
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
    </members>
</doc>
